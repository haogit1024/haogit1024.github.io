<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-03T02:49:46.340Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端分离的重要性</title>
    <link href="http://yoursite.com/2018/05/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <id>http://yoursite.com/2018/05/03/前后端分离的重要性/</id>
    <published>2018-05-03T02:18:49.000Z</published>
    <updated>2018-05-03T02:49:46.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前后端分离的意义和重要性（待完善）"><a href="#前后端分离的意义和重要性（待完善）" class="headerlink" title="前后端分离的意义和重要性（待完善）"></a>前后端分离的意义和重要性（待完善）</h3><h4 id="技术方面"><a href="#技术方面" class="headerlink" title="技术方面"></a>技术方面</h4><ol><li>前后端分开迭代，前端或后端需要频繁迭代时不影响另一端（修改数据逻辑不影响显示逻辑）</li><li>分离数据逻辑和表现逻辑(前后端耦合容易造成数据逻辑与表现逻辑混杂不清,这点在debug的时候尤其痛苦)</li><li>展示类，管理类（CMS）项目强烈建议前后端分离</li><li>前后端解耦方便维护（解耦有多张要就不多说了）。后端专注于提供数据，维护系统稳定，保证数据安全可靠（数据逻辑）。前端专注于交互和ui（表现逻辑）</li><li>可以个APP端和web端提供统一的接口（同样的业务逻辑如果要写N遍，头疼，debug或加功能还要加N遍，心烦）</li></ol><h4 id="人员方面"><a href="#人员方面" class="headerlink" title="人员方面"></a>人员方面</h4><ol><li>可以让每个员工变的更加专注，发挥TA自己最大的能力。前后端分离是为了更好的协作，在组织和流程上更加容易管理和达到比较高的效率</li><li>技术人员往往只能精通一个方面的技术（靠谱的全栈工程师还是少，或者说全栈工程师只是某个技术栈的全栈工程师）</li></ol><h4 id="综合方面"><a href="#综合方面" class="headerlink" title="综合方面"></a>综合方面</h4><ol><li>前后端分离对人员和技术的要求更低</li></ol><p><strong>前后端分离是指技术架构上的分离，而不是组织/流程、职位/工种的分离</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前后端分离的意义和重要性（待完善）&quot;&gt;&lt;a href=&quot;#前后端分离的意义和重要性（待完善）&quot; class=&quot;headerlink&quot; title=&quot;前后端分离的意义和重要性（待完善）&quot;&gt;&lt;/a&gt;前后端分离的意义和重要性（待完善）&lt;/h3&gt;&lt;h4 id=&quot;技术方面&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>api迭代</title>
    <link href="http://yoursite.com/2018/05/03/api%E8%BF%AD%E4%BB%A3/"/>
    <id>http://yoursite.com/2018/05/03/api迭代/</id>
    <published>2018-05-03T01:06:28.000Z</published>
    <updated>2018-05-03T01:45:46.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="API迭代总结"><a href="#API迭代总结" class="headerlink" title="API迭代总结"></a>API迭代总结</h3><ol><li>升级要兼容旧版接口</li><li>坚持开闭原则(扩展开放，对修改关闭)</li><li>代码要符合最新定义的协议，不能存在部分没有升级的情况</li><li>注意生产环境和开发环境的代码和数据同步问题</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;API迭代总结&quot;&gt;&lt;a href=&quot;#API迭代总结&quot; class=&quot;headerlink&quot; title=&quot;API迭代总结&quot;&gt;&lt;/a&gt;API迭代总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;升级要兼容旧版接口&lt;/li&gt;
&lt;li&gt;坚持开闭原则(扩展开放，对修改关闭)&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目改造总结</title>
    <link href="http://yoursite.com/2018/05/02/%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/02/项目改造总结/</id>
    <published>2018-05-02T01:51:30.000Z</published>
    <updated>2018-05-02T02:27:01.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目改造总结了几点经验"><a href="#项目改造总结了几点经验" class="headerlink" title="项目改造总结了几点经验"></a>项目改造总结了几点经验</h3><ol><li>项目开始尽可能想到更多方面 </li><li>尽可能不要硬编码  </li><li>层次尽可能清晰   </li><li>实体关联关系一定要明确且不要随便乱改实体关联关系</li></ol><h4 id="项目开始尽可能想到更多方面"><a href="#项目开始尽可能想到更多方面" class="headerlink" title="项目开始尽可能想到更多方面"></a>项目开始尽可能想到更多方面</h4><p>根据代码大全的建议，项目开始之前想的越周到越好。在项目进行中修改项目架构和数据接口(添加表或者修改表之间的关系)都会早成项目管理混乱和代码混乱。例如：为了兼容和适应新的数据库表关系，代码中会出现很多兼容代码。这些代码看起来会很奇怪，可读性较差，增加维护难度。  </p><h4 id="尽可能不要硬编码"><a href="#尽可能不要硬编码" class="headerlink" title="尽可能不要硬编码"></a>尽可能不要硬编码</h4><p>这应该是基本要求了。一定要注意代码封装，写新的业务逻辑的时候，代码从高层向下一层一层抽象，例如：先抽象出controller, controller包含了整合业务的逻辑, 根据controller的要求去调用或写service, 然后service去调用或写dao。切记不能在写controller的时候碰到一个操作就转过去写service或dao, 应该先把controller写完。service同理, 先写完service再写dao。这是写新业务的方法, 在项目开始的时候，应该要先写一些可能用到的dao和service。</p><h4 id="层次尽可能清晰"><a href="#层次尽可能清晰" class="headerlink" title="层次尽可能清晰"></a>层次尽可能清晰</h4><p>代码一定要分层，层次要清晰，层与层之间的调用关系不能乱。</p><h4 id="实体关联关系一定要明确且不要随便乱改实体关联关系"><a href="#实体关联关系一定要明确且不要随便乱改实体关联关系" class="headerlink" title="实体关联关系一定要明确且不要随便乱改实体关联关系"></a>实体关联关系一定要明确且不要随便乱改实体关联关系</h4><p>更改实体关系，会产生一部分旧数据用的是以前的关联关系。更改实体关联关系相当于重构一部分功能。因为要兼容旧数据，会导致代码混乱</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;项目改造总结了几点经验&quot;&gt;&lt;a href=&quot;#项目改造总结了几点经验&quot; class=&quot;headerlink&quot; title=&quot;项目改造总结了几点经验&quot;&gt;&lt;/a&gt;项目改造总结了几点经验&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;项目开始尽可能想到更多方面 &lt;/li&gt;
&lt;li&gt;尽可能不
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/02/hello-world/"/>
    <id>http://yoursite.com/2018/05/02/hello-world/</id>
    <published>2018-05-02T01:39:28.651Z</published>
    <updated>2018-04-27T09:48:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>blog</title>
    <link href="http://yoursite.com/2018/04/27/blog/"/>
    <id>http://yoursite.com/2018/04/27/blog/</id>
    <published>2018-04-27T09:54:48.000Z</published>
    <updated>2018-04-27T09:55:01.476Z</updated>
    
    <content type="html"><![CDATA[<p>this is my blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;this is my blog&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
