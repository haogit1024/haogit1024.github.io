<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-09T09:56:49.566Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字符和字符编码</title>
    <link href="http://yoursite.com/2018/05/09/%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2018/05/09/字符和字符编码/</id>
    <published>2018-05-09T09:56:49.000Z</published>
    <updated>2018-05-09T09:56:49.566Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>debug的一些方法</title>
    <link href="http://yoursite.com/2018/05/08/debug%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/08/debug的一些方法/</id>
    <published>2018-05-08T09:28:33.000Z</published>
    <updated>2018-05-08T09:34:29.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="debug的一些方法"><a href="#debug的一些方法" class="headerlink" title="debug的一些方法"></a>debug的一些方法</h3><p><strong>线面方法部分前后顺序</strong></p><ol><li>确认问题的具体信息<blockquote><p>出现问题时一定要尽可能的收集错误信息，便于追踪问题</p></blockquote></li><li>查找日志<blockquote><p>在日志中查找出现问题的地方</p></blockquote></li><li>重现问题<blockquote><p>只有重现问题的时候才能调试。尝试修复bug后，通过重现问题检测bug修复情况</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;debug的一些方法&quot;&gt;&lt;a href=&quot;#debug的一些方法&quot; class=&quot;headerlink&quot; title=&quot;debug的一些方法&quot;&gt;&lt;/a&gt;debug的一些方法&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;线面方法部分前后顺序&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IOC和DI</title>
    <link href="http://yoursite.com/2018/05/07/IOC%E5%92%8CDI/"/>
    <id>http://yoursite.com/2018/05/07/IOC和DI/</id>
    <published>2018-05-07T03:49:31.000Z</published>
    <updated>2018-05-10T09:01:04.312Z</updated>
    
    <content type="html"><![CDATA[<p>spring IoC是spring的核心模块之一，几乎所有的spring学习教程或资料都提倡先了解spring IoC。spring IoC贯穿整个spring框架，所有的模块都是用spring IoC container管理bean。<br>首先我们先来了解几个概念</p><ul><li>耦合度<blockquote><p>耦合度有高低之分</p></blockquote></li><li>IoC <a href="https://www.zhihu.com/question/21386172?sort=created" target="_blank" rel="noopener">https://www.zhihu.com/question/21386172?sort=created</a>, <a href="https://my.oschina.net/zjzhai/blog/496006" target="_blank" rel="noopener">https://my.oschina.net/zjzhai/blog/496006</a> , <a href="https://blog.csdn.net/qq_22654611/article/details/52606960" target="_blank" rel="noopener">https://blog.csdn.net/qq_22654611/article/details/52606960</a><br>IoC即Inversion of Control是控制反转的意思，这是一种设计思想（模式）。用于解耦。传统的设计：当对象A需要对象B完成某项功能，对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。</li><li>DI<br>DI即Dependency Injection是控制反转的意思。DI要表达的是一个过程。对象通过构造函数参数、工厂方法参数或其他初始方法”注入”对象，这时候注入的对象和被被注入的对象的依赖关系。其实IoC和DI是同一个意思，只是观察的角度不同产生了两种说法或者说依赖注入更加具体。  <blockquote><p>ps：也有人说控制反转（Inversion of Control）括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）两个部分。依赖注入和依赖查找组成了IoC</p></blockquote></li></ul><h4 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h4><p>我们假设一个场景：对象A需要对象B完成某项功能<br>传统的设计下：对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。<br>而在控制反转模式下，程序员会把定义好的对象交给IoC容器同一管理，而不是在对象内部创建，此时A和B耦合（A依赖B），但是依赖程度比较低，A不需要控制B的生命周期。对于这种对对象的控制权由需求方向第三方容器的转义称为控制反转。ioc的思想最核心的地方在于，资源不由使用资源的双方管理。  </p><p>上述例子我们明白了两个问题  </p><ol><li>控制关系和控制内容：传统的程序是主动创建依赖对象，所以A控制B，而IOC模式下有专门的容器创建对象，所以控制关系是<strong>容器控制对象</strong>。控制的内容是<strong>创建、销毁等生命周期</strong>。  </li><li>什么是反转和反转内容：有反转就有正转，程序主动创建以来对象称为正转，由第三方容器创建依赖对象及注入依赖对象称为反转。所以<strong>反转是由容器查找并注入依赖对象</strong>，反转的内容是<strong>依赖兑现的获取</strong>。  </li></ol><p>IoC的核心思想是资源不由使用资源的双方管理，而由不使用资源的第三方管理。</p><h4 id="IOC-DI-的好处"><a href="#IOC-DI-的好处" class="headerlink" title="IOC(DI)的好处"></a>IOC(DI)的好处</h4><p>第一，资源集中管理，实现资源的可配置和易管理。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。  </p><ol><li>资源集中管理，实现资源的可配置和易管理<br>如果每个对象都是主动去创建资源，会导致资源分散难于管理，稍有不慎还会导致重复创建资源和没有正确关闭资源导致内存泄漏。</li><li>降低了使用资源双方的依赖程度，也就是我们说的耦合度<br>低耦合便于书写代码和维护代码</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring IoC是spring的核心模块之一，几乎所有的spring学习教程或资料都提倡先了解spring IoC。spring IoC贯穿整个spring框架，所有的模块都是用spring IoC container管理bean。&lt;br&gt;首先我们先来了解几个概念&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编程语言强类型、弱类型、静态类型、动态类型的区别</title>
    <link href="http://yoursite.com/2018/05/04/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%BC%BA%E7%B1%BB%E5%9E%8B%E3%80%81%E5%BC%B1%E7%B1%BB%E5%9E%8B%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E3%80%81%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/05/04/编程语言强类型、弱类型、静态类型、动态类型的区别/</id>
    <published>2018-05-04T03:40:52.000Z</published>
    <updated>2018-05-04T07:25:15.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编程语言强类型、弱类型、静态类型、动态类型的区别"><a href="#编程语言强类型、弱类型、静态类型、动态类型的区别" class="headerlink" title="编程语言强类型、弱类型、静态类型、动态类型的区别"></a>编程语言强类型、弱类型、静态类型、动态类型的区别</h3><p>之前一直没有好好了解编程语言类型的区别，现在来补补课。  </p><p>引用一个轮子哥的回答，判断语言类型的区别如下</p><blockquote><p>强类型：偏向于不容忍隐式类型转换。譬如说haskell的int就不能变成double<br>弱类型：偏向于容忍隐式类型转换。譬如说C语言的int可以变成double<br>静态类型：编译的时候就知道每一个变量的类型，因为类型错误而不能做的事情是语法错误。<br>动态类型：编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。譬如说你不能对一个数字a写a[10]当数组用。</p></blockquote><p>上述引用可以作为一般的判断规则</p><p>下面是主流编程语言的类型划分图  </p><p><img src="/images/programming_language.jpg" alt="Alt language">    </p><p><strong>下面用javascript, python, java说明一下</strong><br>先了解一个概念</p><h5 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h5><blockquote><p>类型安全就是说，同一段内存，在不同的地方，会被强制要求使用相同的办法来解释（interpret）<br>类型安全代码只访问被授权可以访问的内存位置。</p></blockquote><h4 id="强类型和弱类型"><a href="#强类型和弱类型" class="headerlink" title="强类型和弱类型"></a>强类型和弱类型</h4><p>强弱类型是指语言类型系统对类型检查的严格程度。强类型语言指定了数据类型后，如果不经过强制类型转换，他将永远是这个数据类型。弱类型刚好相反，他允许编译器进行隐式类型转换。 不是类型安全的<br><strong>下面举2个例子</strong><br>javascript是弱类型语言，允许隐式类型转换，int类型的2会被转换成String类型的”2”，所以得到的a = “12”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"1"</span> + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>而python是强类型语言，不允许隐式类型转换。所以下面的代码会报错并提示类型错误。是类型安全的</p><pre><code class="python">a = <span class="string">"1"</span> + <span class="number">2</span>Traceback (most recent call last):  File <span class="string">"test.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;    a = <span class="string">"1"</span> + <span class="number">2</span>TypeError: must be str, <span class="keyword">not</span> int</code></pre><h4 id="静态和动态类型"><a href="#静态和动态类型" class="headerlink" title="静态和动态类型"></a>静态和动态类型</h4><p>动态类型在运行时才确定变量类型和执行类型检查，已python为例</p><pre><code class="python"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span><span class="meta">&gt;&gt;&gt; </span>type(a)&lt;type <span class="string">'int'</span>&gt;<span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"s"</span><span class="meta">&gt;&gt;&gt; </span>type(a)&lt;type <span class="string">'str'</span>&gt;</code></pre><p>静态语言在编译时就可以知道变量类型和执行类型检查，已java为例，在执行javac的时候就会报错，提示类型错误</p><pre><code class="java"><span class="keyword">int</span> a = <span class="string">"a"</span>;Test.java:<span class="number">3</span>: 错误: 不兼容的类型: String无法转换为<span class="keyword">int</span>        <span class="keyword">int</span> a = <span class="string">"a"</span>;                ^<span class="number">1</span> 个错误</code></pre><p>如果只是简单的了解一下编程语言强类型、弱类型、静态类型、动态类型的区别，读到这里就可以了。下面是关于编程语言强类型、弱类型、静态类型、动态类型区别的详细和深层次的分析，涉及一下比较专业的名词和知识。</p><hr><p>（待续）</p><p>发现一遍比较详细的文章可以读一下，<a href="http://linianhui.cnblogs.com/p/plp-04-datatypes.html" title="数据类型" target="_blank" rel="noopener">数据类型</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编程语言强类型、弱类型、静态类型、动态类型的区别&quot;&gt;&lt;a href=&quot;#编程语言强类型、弱类型、静态类型、动态类型的区别&quot; class=&quot;headerlink&quot; title=&quot;编程语言强类型、弱类型、静态类型、动态类型的区别&quot;&gt;&lt;/a&gt;编程语言强类型、弱类型、静态
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前后端分离的重要性</title>
    <link href="http://yoursite.com/2018/05/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <id>http://yoursite.com/2018/05/03/前后端分离的重要性/</id>
    <published>2018-05-03T02:18:49.000Z</published>
    <updated>2018-05-03T02:53:02.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前后端分离的意义和重要性（待完善）"><a href="#前后端分离的意义和重要性（待完善）" class="headerlink" title="前后端分离的意义和重要性（待完善）"></a>前后端分离的意义和重要性（待完善）</h3><h4 id="技术方面"><a href="#技术方面" class="headerlink" title="技术方面"></a>技术方面</h4><ol><li>前后端分开迭代，前端或后端需要频繁迭代时不影响另一端（修改数据逻辑不影响显示逻辑）</li><li>分离数据逻辑和表现逻辑(前后端耦合容易造成数据逻辑与表现逻辑混杂不清,这点在debug的时候尤其痛苦)</li><li>展示类，管理类（CMS）项目强烈建议前后端分离</li><li>前后端解耦方便维护（解耦有多重要就不多说了）。后端专注于提供数据，维护系统稳定，保证数据安全可靠（数据逻辑）。前端专注于交互和ui（表现逻辑）</li><li>可以个APP端和web端提供统一的接口（同样的业务逻辑如果要写N遍，头疼，debug或加功能还要加N遍，心烦）</li></ol><h4 id="人员方面"><a href="#人员方面" class="headerlink" title="人员方面"></a>人员方面</h4><ol><li>可以让每个员工变的更加专注，发挥TA自己最大的能力。前后端分离是为了更好的协作，在组织和流程上更加容易管理和达到更高的效率</li><li>技术人员往往只能精通一个方面的技术（靠谱的全栈工程师还是少，或者说全栈工程师只是某个技术栈的全栈工程师）</li></ol><h4 id="综合方面"><a href="#综合方面" class="headerlink" title="综合方面"></a>综合方面</h4><ol><li>前后端分离对人员和技术的要求更低</li></ol><p><strong>前后端分离是指技术架构上的分离，而不是组织/流程、职位/工种的分离</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前后端分离的意义和重要性（待完善）&quot;&gt;&lt;a href=&quot;#前后端分离的意义和重要性（待完善）&quot; class=&quot;headerlink&quot; title=&quot;前后端分离的意义和重要性（待完善）&quot;&gt;&lt;/a&gt;前后端分离的意义和重要性（待完善）&lt;/h3&gt;&lt;h4 id=&quot;技术方面&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>api迭代</title>
    <link href="http://yoursite.com/2018/05/03/api%E8%BF%AD%E4%BB%A3/"/>
    <id>http://yoursite.com/2018/05/03/api迭代/</id>
    <published>2018-05-03T01:06:28.000Z</published>
    <updated>2018-05-03T01:45:46.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="API迭代总结"><a href="#API迭代总结" class="headerlink" title="API迭代总结"></a>API迭代总结</h3><ol><li>升级要兼容旧版接口</li><li>坚持开闭原则(扩展开放，对修改关闭)</li><li>代码要符合最新定义的协议，不能存在部分没有升级的情况</li><li>注意生产环境和开发环境的代码和数据同步问题</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;API迭代总结&quot;&gt;&lt;a href=&quot;#API迭代总结&quot; class=&quot;headerlink&quot; title=&quot;API迭代总结&quot;&gt;&lt;/a&gt;API迭代总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;升级要兼容旧版接口&lt;/li&gt;
&lt;li&gt;坚持开闭原则(扩展开放，对修改关闭)&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目改造总结</title>
    <link href="http://yoursite.com/2018/05/02/%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/02/项目改造总结/</id>
    <published>2018-05-02T01:51:30.000Z</published>
    <updated>2018-05-02T02:27:01.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目改造总结了几点经验"><a href="#项目改造总结了几点经验" class="headerlink" title="项目改造总结了几点经验"></a>项目改造总结了几点经验</h3><ol><li>项目开始尽可能想到更多方面 </li><li>尽可能不要硬编码  </li><li>层次尽可能清晰   </li><li>实体关联关系一定要明确且不要随便乱改实体关联关系</li></ol><h4 id="项目开始尽可能想到更多方面"><a href="#项目开始尽可能想到更多方面" class="headerlink" title="项目开始尽可能想到更多方面"></a>项目开始尽可能想到更多方面</h4><p>根据代码大全的建议，项目开始之前想的越周到越好。在项目进行中修改项目架构和数据接口(添加表或者修改表之间的关系)都会早成项目管理混乱和代码混乱。例如：为了兼容和适应新的数据库表关系，代码中会出现很多兼容代码。这些代码看起来会很奇怪，可读性较差，增加维护难度。  </p><h4 id="尽可能不要硬编码"><a href="#尽可能不要硬编码" class="headerlink" title="尽可能不要硬编码"></a>尽可能不要硬编码</h4><p>这应该是基本要求了。一定要注意代码封装，写新的业务逻辑的时候，代码从高层向下一层一层抽象，例如：先抽象出controller, controller包含了整合业务的逻辑, 根据controller的要求去调用或写service, 然后service去调用或写dao。切记不能在写controller的时候碰到一个操作就转过去写service或dao, 应该先把controller写完。service同理, 先写完service再写dao。这是写新业务的方法, 在项目开始的时候，应该要先写一些可能用到的dao和service。</p><h4 id="层次尽可能清晰"><a href="#层次尽可能清晰" class="headerlink" title="层次尽可能清晰"></a>层次尽可能清晰</h4><p>代码一定要分层，层次要清晰，层与层之间的调用关系不能乱。</p><h4 id="实体关联关系一定要明确且不要随便乱改实体关联关系"><a href="#实体关联关系一定要明确且不要随便乱改实体关联关系" class="headerlink" title="实体关联关系一定要明确且不要随便乱改实体关联关系"></a>实体关联关系一定要明确且不要随便乱改实体关联关系</h4><p>更改实体关系，会产生一部分旧数据用的是以前的关联关系。更改实体关联关系相当于重构一部分功能。因为要兼容旧数据，会导致代码混乱</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;项目改造总结了几点经验&quot;&gt;&lt;a href=&quot;#项目改造总结了几点经验&quot; class=&quot;headerlink&quot; title=&quot;项目改造总结了几点经验&quot;&gt;&lt;/a&gt;项目改造总结了几点经验&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;项目开始尽可能想到更多方面 &lt;/li&gt;
&lt;li&gt;尽可能不
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/02/hello-world/"/>
    <id>http://yoursite.com/2018/05/02/hello-world/</id>
    <published>2018-05-02T01:39:28.651Z</published>
    <updated>2018-04-27T09:48:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>blog</title>
    <link href="http://yoursite.com/2018/04/27/blog/"/>
    <id>http://yoursite.com/2018/04/27/blog/</id>
    <published>2018-04-27T09:54:48.000Z</published>
    <updated>2018-04-27T09:55:01.476Z</updated>
    
    <content type="html"><![CDATA[<p>this is my blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;this is my blog&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
