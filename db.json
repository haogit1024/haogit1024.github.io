{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1554687935934},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1554687935935},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1554687935936},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1554687935936},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1554687935937},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1554687935961},{"_id":"source/_posts/IOC和DI.md","hash":"1501abe0e0739ab72c194aca6070807b78d596dd","modified":1554687935929},{"_id":"source/_posts/Linux常用命令.md","hash":"fda0cf50c10b33418b8a75b514f408c01e12e865","modified":1554970598814},{"_id":"source/_posts/Spring-Security笔记.md","hash":"bfd4c6101a6d7cb21a9c8510dc8f961764934d06","modified":1554709260766},{"_id":"source/_posts/api迭代.md","hash":"3b1b8043b22177efb7fea7e6ced4b9ccad9da1d8","modified":1554687935929},{"_id":"source/_posts/debug的一些方法.md","hash":"2f92d5b75131a50c6aebac465419555936ae863b","modified":1554868567772},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1554687935930},{"_id":"source/_posts/事务.md","hash":"e2f0d1dacfc8c4d8d5507099c1a4839c95f68818","modified":1554687935931},{"_id":"source/_posts/前后端分离的重要性.md","hash":"74d5e451fb3d377d0a8e00a9a08f0b06d85c1785","modified":1554687935931},{"_id":"source/_posts/字符和字符编码.md","hash":"b6efd76c44c7056aebe82fb4ae9c1070101f7db3","modified":1554687935932},{"_id":"source/_posts/编程语言强类型、弱类型、静态类型、动态类型的区别.md","hash":"9a8cdf4915c9ff31c74941039b35fe190790c464","modified":1554687935933},{"_id":"source/_posts/项目改造总结.md","hash":"0197f00e39a7f93bea823d5fb45c6c69cdbd88a9","modified":1554687935933},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1554687935938},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1554687935938},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1554687935939},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1554687935939},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1554687935940},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1554687935940},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1554687935941},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1554687935941},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1554687935942},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1554687935943},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1554687935943},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1554687935944},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554687935958},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1554687935959},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554687935958},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554687935960},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1554687935959},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554687935960},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554687935961},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1554687935962},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1554687935945},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1554687935946},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1554687935947},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1554687935947},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1554687935948},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1554687935949},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1554687935948},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1554687935950},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1554687935950},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1554687935951},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1554687935954},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1554687935956},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1554687935955},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1554687935956},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1554687935957},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1554687935957},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1554687935963},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1554687935972},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554687935983},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1554687935981},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554687935983},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554687935985},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554687935985},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554687935984},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554687935986},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1554687935990},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1554687935991},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1554687935992},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1554687935992},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1554687935951},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1554687935951},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1554687935952},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1554687935953},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1554687935953},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1554687935954},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1554687935964},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1554687935965},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1554687935966},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1554687935965},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1554687935967},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1554687935967},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1554687935968},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1554687935969},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1554687935969},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1554687935970},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1554687935971},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1554687935971},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1554687935974},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1554687935975},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1554687935978},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554687935987},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1554687935988},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1554687935987},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1554687935988},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1554687935989},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1554687935990},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1554687935978},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1554687935976},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1554687935981}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"IOC和DI","date":"2018-05-07T03:49:31.000Z","_content":"spring IoC是spring的核心模块之一，几乎所有的spring学习教程或资料都提倡先了解spring IoC。spring IoC贯穿整个spring框架，所有的模块都是用spring IoC container管理bean。  \n首先我们先来了解几个概念\n* 耦合度\n> 耦合度有高低之分\n* IoC https://www.zhihu.com/question/21386172?sort=created, https://my.oschina.net/zjzhai/blog/496006 , https://blog.csdn.net/qq_22654611/article/details/52606960\nIoC即Inversion of Control是控制反转的意思，这是一种设计思想（模式）。用于解耦。传统的设计：当对象A需要对象B完成某项功能，对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。\n* DI\nDI即Dependency Injection是控制反转的意思。DI要表达的是一个过程。对象通过构造函数参数、工厂方法参数或其他初始方法\"注入\"对象，这时候注入的对象和被被注入的对象的依赖关系。其实IoC和DI是同一个意思，只是观察的角度不同产生了两种说法或者说依赖注入更加具体。  \n>ps：也有人说控制反转（Inversion of Control）括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）两个部分。依赖注入和依赖查找组成了IoC\n\n#### IoC\n我们假设一个场景：对象A需要对象B完成某项功能  \n传统的设计下：对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。  \n而在控制反转模式下，程序员会把定义好的对象交给IoC容器同一管理，而不是在对象内部创建，此时A和B耦合（A依赖B），但是依赖程度比较低，A不需要控制B的生命周期。对于这种对对象的控制权由需求方向第三方容器的转义称为控制反转。ioc的思想最核心的地方在于，资源不由使用资源的双方管理。  \n\n上述例子我们明白了两个问题  \n1. 控制关系和控制内容：传统的程序是主动创建依赖对象，所以A控制B，而IOC模式下有专门的容器创建对象，所以控制关系是**容器控制对象**。控制的内容是**创建、销毁等生命周期**。  \n2. 什么是反转和反转内容：有反转就有正转，程序主动创建以来对象称为正转，由第三方容器创建依赖对象及注入依赖对象称为反转。所以**反转是由容器查找并注入依赖对象**，反转的内容是**依赖兑现的获取**。  \n\nIoC的核心思想是资源不由使用资源的双方管理，而由不使用资源的第三方管理。\n\n#### IOC(DI)的好处\n第一，资源集中管理，实现资源的可配置和易管理。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。  \n1. 资源集中管理，实现资源的可配置和易管理\n如果每个对象都是主动去创建资源，会导致资源分散难于管理，稍有不慎还会导致重复创建资源和没有正确关闭资源导致内存泄漏。\n2. 降低了使用资源双方的依赖程度，也就是我们说的耦合度\n低耦合便于书写代码和维护代码\n","source":"_posts/IOC和DI.md","raw":"---\ntitle: IOC和DI\ndate: 2018-05-07 11:49:31\ntags:\n---\nspring IoC是spring的核心模块之一，几乎所有的spring学习教程或资料都提倡先了解spring IoC。spring IoC贯穿整个spring框架，所有的模块都是用spring IoC container管理bean。  \n首先我们先来了解几个概念\n* 耦合度\n> 耦合度有高低之分\n* IoC https://www.zhihu.com/question/21386172?sort=created, https://my.oschina.net/zjzhai/blog/496006 , https://blog.csdn.net/qq_22654611/article/details/52606960\nIoC即Inversion of Control是控制反转的意思，这是一种设计思想（模式）。用于解耦。传统的设计：当对象A需要对象B完成某项功能，对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。\n* DI\nDI即Dependency Injection是控制反转的意思。DI要表达的是一个过程。对象通过构造函数参数、工厂方法参数或其他初始方法\"注入\"对象，这时候注入的对象和被被注入的对象的依赖关系。其实IoC和DI是同一个意思，只是观察的角度不同产生了两种说法或者说依赖注入更加具体。  \n>ps：也有人说控制反转（Inversion of Control）括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）两个部分。依赖注入和依赖查找组成了IoC\n\n#### IoC\n我们假设一个场景：对象A需要对象B完成某项功能  \n传统的设计下：对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。  \n而在控制反转模式下，程序员会把定义好的对象交给IoC容器同一管理，而不是在对象内部创建，此时A和B耦合（A依赖B），但是依赖程度比较低，A不需要控制B的生命周期。对于这种对对象的控制权由需求方向第三方容器的转义称为控制反转。ioc的思想最核心的地方在于，资源不由使用资源的双方管理。  \n\n上述例子我们明白了两个问题  \n1. 控制关系和控制内容：传统的程序是主动创建依赖对象，所以A控制B，而IOC模式下有专门的容器创建对象，所以控制关系是**容器控制对象**。控制的内容是**创建、销毁等生命周期**。  \n2. 什么是反转和反转内容：有反转就有正转，程序主动创建以来对象称为正转，由第三方容器创建依赖对象及注入依赖对象称为反转。所以**反转是由容器查找并注入依赖对象**，反转的内容是**依赖兑现的获取**。  \n\nIoC的核心思想是资源不由使用资源的双方管理，而由不使用资源的第三方管理。\n\n#### IOC(DI)的好处\n第一，资源集中管理，实现资源的可配置和易管理。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。  \n1. 资源集中管理，实现资源的可配置和易管理\n如果每个对象都是主动去创建资源，会导致资源分散难于管理，稍有不慎还会导致重复创建资源和没有正确关闭资源导致内存泄漏。\n2. 降低了使用资源双方的依赖程度，也就是我们说的耦合度\n低耦合便于书写代码和维护代码\n","slug":"IOC和DI","published":1,"updated":"2019-04-08T01:45:35.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9ueb0000zoul5khtlfxa","content":"<p>spring IoC是spring的核心模块之一，几乎所有的spring学习教程或资料都提倡先了解spring IoC。spring IoC贯穿整个spring框架，所有的模块都是用spring IoC container管理bean。<br>首先我们先来了解几个概念</p>\n<ul>\n<li>耦合度<blockquote>\n<p>耦合度有高低之分</p>\n</blockquote>\n</li>\n<li>IoC <a href=\"https://www.zhihu.com/question/21386172?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21386172?sort=created</a>, <a href=\"https://my.oschina.net/zjzhai/blog/496006\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zjzhai/blog/496006</a> , <a href=\"https://blog.csdn.net/qq_22654611/article/details/52606960\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_22654611/article/details/52606960</a><br>IoC即Inversion of Control是控制反转的意思，这是一种设计思想（模式）。用于解耦。传统的设计：当对象A需要对象B完成某项功能，对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。</li>\n<li>DI<br>DI即Dependency Injection是控制反转的意思。DI要表达的是一个过程。对象通过构造函数参数、工厂方法参数或其他初始方法”注入”对象，这时候注入的对象和被被注入的对象的依赖关系。其实IoC和DI是同一个意思，只是观察的角度不同产生了两种说法或者说依赖注入更加具体。  <blockquote>\n<p>ps：也有人说控制反转（Inversion of Control）括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）两个部分。依赖注入和依赖查找组成了IoC</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h4><p>我们假设一个场景：对象A需要对象B完成某项功能<br>传统的设计下：对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。<br>而在控制反转模式下，程序员会把定义好的对象交给IoC容器同一管理，而不是在对象内部创建，此时A和B耦合（A依赖B），但是依赖程度比较低，A不需要控制B的生命周期。对于这种对对象的控制权由需求方向第三方容器的转义称为控制反转。ioc的思想最核心的地方在于，资源不由使用资源的双方管理。  </p>\n<p>上述例子我们明白了两个问题  </p>\n<ol>\n<li>控制关系和控制内容：传统的程序是主动创建依赖对象，所以A控制B，而IOC模式下有专门的容器创建对象，所以控制关系是<strong>容器控制对象</strong>。控制的内容是<strong>创建、销毁等生命周期</strong>。  </li>\n<li>什么是反转和反转内容：有反转就有正转，程序主动创建以来对象称为正转，由第三方容器创建依赖对象及注入依赖对象称为反转。所以<strong>反转是由容器查找并注入依赖对象</strong>，反转的内容是<strong>依赖兑现的获取</strong>。  </li>\n</ol>\n<p>IoC的核心思想是资源不由使用资源的双方管理，而由不使用资源的第三方管理。</p>\n<h4 id=\"IOC-DI-的好处\"><a href=\"#IOC-DI-的好处\" class=\"headerlink\" title=\"IOC(DI)的好处\"></a>IOC(DI)的好处</h4><p>第一，资源集中管理，实现资源的可配置和易管理。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。  </p>\n<ol>\n<li>资源集中管理，实现资源的可配置和易管理<br>如果每个对象都是主动去创建资源，会导致资源分散难于管理，稍有不慎还会导致重复创建资源和没有正确关闭资源导致内存泄漏。</li>\n<li>降低了使用资源双方的依赖程度，也就是我们说的耦合度<br>低耦合便于书写代码和维护代码</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>spring IoC是spring的核心模块之一，几乎所有的spring学习教程或资料都提倡先了解spring IoC。spring IoC贯穿整个spring框架，所有的模块都是用spring IoC container管理bean。<br>首先我们先来了解几个概念</p>\n<ul>\n<li>耦合度<blockquote>\n<p>耦合度有高低之分</p>\n</blockquote>\n</li>\n<li>IoC <a href=\"https://www.zhihu.com/question/21386172?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21386172?sort=created</a>, <a href=\"https://my.oschina.net/zjzhai/blog/496006\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zjzhai/blog/496006</a> , <a href=\"https://blog.csdn.net/qq_22654611/article/details/52606960\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_22654611/article/details/52606960</a><br>IoC即Inversion of Control是控制反转的意思，这是一种设计思想（模式）。用于解耦。传统的设计：当对象A需要对象B完成某项功能，对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。</li>\n<li>DI<br>DI即Dependency Injection是控制反转的意思。DI要表达的是一个过程。对象通过构造函数参数、工厂方法参数或其他初始方法”注入”对象，这时候注入的对象和被被注入的对象的依赖关系。其实IoC和DI是同一个意思，只是观察的角度不同产生了两种说法或者说依赖注入更加具体。  <blockquote>\n<p>ps：也有人说控制反转（Inversion of Control）括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）两个部分。依赖注入和依赖查找组成了IoC</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h4><p>我们假设一个场景：对象A需要对象B完成某项功能<br>传统的设计下：对象A会创建对象B，此时A和B耦合（A依赖B）且耦合度比较高，A还要负责控制B的生命周期。<br>而在控制反转模式下，程序员会把定义好的对象交给IoC容器同一管理，而不是在对象内部创建，此时A和B耦合（A依赖B），但是依赖程度比较低，A不需要控制B的生命周期。对于这种对对象的控制权由需求方向第三方容器的转义称为控制反转。ioc的思想最核心的地方在于，资源不由使用资源的双方管理。  </p>\n<p>上述例子我们明白了两个问题  </p>\n<ol>\n<li>控制关系和控制内容：传统的程序是主动创建依赖对象，所以A控制B，而IOC模式下有专门的容器创建对象，所以控制关系是<strong>容器控制对象</strong>。控制的内容是<strong>创建、销毁等生命周期</strong>。  </li>\n<li>什么是反转和反转内容：有反转就有正转，程序主动创建以来对象称为正转，由第三方容器创建依赖对象及注入依赖对象称为反转。所以<strong>反转是由容器查找并注入依赖对象</strong>，反转的内容是<strong>依赖兑现的获取</strong>。  </li>\n</ol>\n<p>IoC的核心思想是资源不由使用资源的双方管理，而由不使用资源的第三方管理。</p>\n<h4 id=\"IOC-DI-的好处\"><a href=\"#IOC-DI-的好处\" class=\"headerlink\" title=\"IOC(DI)的好处\"></a>IOC(DI)的好处</h4><p>第一，资源集中管理，实现资源的可配置和易管理。第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度。  </p>\n<ol>\n<li>资源集中管理，实现资源的可配置和易管理<br>如果每个对象都是主动去创建资源，会导致资源分散难于管理，稍有不慎还会导致重复创建资源和没有正确关闭资源导致内存泄漏。</li>\n<li>降低了使用资源双方的依赖程度，也就是我们说的耦合度<br>低耦合便于书写代码和维护代码</li>\n</ol>\n"},{"title":"Linux常用命令","date":"2019-04-11T02:01:23.000Z","_content":"### 解压\n\n```base\ntar –xvf file.tar //解压 tar包\ntar -xzvf file.tar.gz //解压tar.gz\ntar -xjvf file.tar.bz2 //解压 tar.bz2\ntar –xZvf file.tar.Z //解压tar.Z\nunrar e file.rar //解压rar\nunzip file.zip //解压zip\n```\n\n1. .tar 用 tar –xvf 解压\n2. .gz 用 gzip -d或者gunzip 解压\n3. .tar.gz和.tgz 用 tar –xzf 解压\n4. .bz2 用 bzip2 -d或者用bunzip2 解压\n5. .tar.bz2用tar –xjf 解压\n6. .Z 用 uncompress 解压\n7. .tar.Z 用tar –xZf 解压\n8. .rar 用 unrar e解压\n9. .zip 用 unzip 解压\n\n---\n\n### 文件操作\n\n#### 重命名\n\n例子：将目录A重命名为B\n\n```base\nmv A B\n```\n\n#### 移动文件\n\n例子：将/a目录移动到/b下，并重命名为c\n\n```base\nmv /a /b/c\n```\n\n#### 查看内存占用\n\n```base\nsudo atop\nfree -h\ntop\n```\n\n例如\n\n```base\nps -ef|grep java\n```\n\n```base\nczh       25068   1702  3 19:08 ?        00:00:50 /usr/bin/java -Djava.util.logging.config.file=/home/czh/tomcat9/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /home/czh/tomcat9/bin/bootstrap.jar:/home/czh/tomcat9/bin/tomcat-juli.jar -Dcatalina.base=/home/czh/tomcat9 -Dcatalina.home=/home/czh/tomcat9 -Djava.io.tmpdir=/home/czh/tomcat9/temp org.apache.catalina.startup.Bootstrap start\nczh       29588  29549  0 19:32 pts/0    00:00:00 grep --color=auto java\n```\n查到了java的进程id为 25068\n\n```base\ntop -p 25068\n```\n\n```base\n 25068 czh       20   0 4102344 668584  16360 S   0.3 16.7   0:50.79 java \n```\n\n#### 防火墙\n\n用ufw管理防火墙和开放端口\n```base\n1.安装\nsudo apt-get install ufw\n2.启用\nsudo ufw enable\nsudo ufw default deny\n运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。关闭所有外部对本机的访问，但本机访问外部正常。\n3.开启/禁用\nsudo ufw allow|deny [service]\n打开或关闭某个端口，例如：\nsudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口\nsudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口\nsudo ufw allow 53 允许外部访问53端口(tcp/udp)\nsudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口\nsudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53\nsudo ufw deny smtp 禁止外部访问smtp服务\nsudo ufw delete allow smtp 删除上面建立的某条规则\n```\n","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ndate: 2019-04-11 10:01:23\ntags:\n---\n### 解压\n\n```base\ntar –xvf file.tar //解压 tar包\ntar -xzvf file.tar.gz //解压tar.gz\ntar -xjvf file.tar.bz2 //解压 tar.bz2\ntar –xZvf file.tar.Z //解压tar.Z\nunrar e file.rar //解压rar\nunzip file.zip //解压zip\n```\n\n1. .tar 用 tar –xvf 解压\n2. .gz 用 gzip -d或者gunzip 解压\n3. .tar.gz和.tgz 用 tar –xzf 解压\n4. .bz2 用 bzip2 -d或者用bunzip2 解压\n5. .tar.bz2用tar –xjf 解压\n6. .Z 用 uncompress 解压\n7. .tar.Z 用tar –xZf 解压\n8. .rar 用 unrar e解压\n9. .zip 用 unzip 解压\n\n---\n\n### 文件操作\n\n#### 重命名\n\n例子：将目录A重命名为B\n\n```base\nmv A B\n```\n\n#### 移动文件\n\n例子：将/a目录移动到/b下，并重命名为c\n\n```base\nmv /a /b/c\n```\n\n#### 查看内存占用\n\n```base\nsudo atop\nfree -h\ntop\n```\n\n例如\n\n```base\nps -ef|grep java\n```\n\n```base\nczh       25068   1702  3 19:08 ?        00:00:50 /usr/bin/java -Djava.util.logging.config.file=/home/czh/tomcat9/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /home/czh/tomcat9/bin/bootstrap.jar:/home/czh/tomcat9/bin/tomcat-juli.jar -Dcatalina.base=/home/czh/tomcat9 -Dcatalina.home=/home/czh/tomcat9 -Djava.io.tmpdir=/home/czh/tomcat9/temp org.apache.catalina.startup.Bootstrap start\nczh       29588  29549  0 19:32 pts/0    00:00:00 grep --color=auto java\n```\n查到了java的进程id为 25068\n\n```base\ntop -p 25068\n```\n\n```base\n 25068 czh       20   0 4102344 668584  16360 S   0.3 16.7   0:50.79 java \n```\n\n#### 防火墙\n\n用ufw管理防火墙和开放端口\n```base\n1.安装\nsudo apt-get install ufw\n2.启用\nsudo ufw enable\nsudo ufw default deny\n运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。关闭所有外部对本机的访问，但本机访问外部正常。\n3.开启/禁用\nsudo ufw allow|deny [service]\n打开或关闭某个端口，例如：\nsudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口\nsudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口\nsudo ufw allow 53 允许外部访问53端口(tcp/udp)\nsudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口\nsudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53\nsudo ufw deny smtp 禁止外部访问smtp服务\nsudo ufw delete allow smtp 删除上面建立的某条规则\n```\n","slug":"Linux常用命令","published":1,"updated":"2019-04-11T08:18:10.780Z","_id":"cjucd9uef0001zoulessema6l","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar –xvf file.tar //解压 tar包</span><br><span class=\"line\">tar -xzvf file.tar.gz //解压tar.gz</span><br><span class=\"line\">tar -xjvf file.tar.bz2 //解压 tar.bz2</span><br><span class=\"line\">tar –xZvf file.tar.Z //解压tar.Z</span><br><span class=\"line\">unrar e file.rar //解压rar</span><br><span class=\"line\">unzip file.zip //解压zip</span><br></pre></td></tr></table></figure>\n<ol>\n<li>.tar 用 tar –xvf 解压</li>\n<li>.gz 用 gzip -d或者gunzip 解压</li>\n<li>.tar.gz和.tgz 用 tar –xzf 解压</li>\n<li>.bz2 用 bzip2 -d或者用bunzip2 解压</li>\n<li>.tar.bz2用tar –xjf 解压</li>\n<li>.Z 用 uncompress 解压</li>\n<li>.tar.Z 用tar –xZf 解压</li>\n<li>.rar 用 unrar e解压</li>\n<li>.zip 用 unzip 解压</li>\n</ol>\n<hr>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><h4 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h4><p>例子：将目录A重命名为B</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv A B</span><br></pre></td></tr></table></figure>\n<h4 id=\"移动文件\"><a href=\"#移动文件\" class=\"headerlink\" title=\"移动文件\"></a>移动文件</h4><p>例子：将/a目录移动到/b下，并重命名为c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /a /b/c</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看内存占用\"><a href=\"#查看内存占用\" class=\"headerlink\" title=\"查看内存占用\"></a>查看内存占用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo atop</span><br><span class=\"line\">free -h</span><br><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">czh       25068   1702  3 19:08 ?        00:00:50 /usr/bin/java -Djava.util.logging.config.file=/home/czh/tomcat9/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /home/czh/tomcat9/bin/bootstrap.jar:/home/czh/tomcat9/bin/tomcat-juli.jar -Dcatalina.base=/home/czh/tomcat9 -Dcatalina.home=/home/czh/tomcat9 -Djava.io.tmpdir=/home/czh/tomcat9/temp org.apache.catalina.startup.Bootstrap start</span><br><span class=\"line\">czh       29588  29549  0 19:32 pts/0    00:00:00 grep --color=auto java</span><br></pre></td></tr></table></figure>\n<p>查到了java的进程id为 25068</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -p 25068</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25068 czh       20   0 4102344 668584  16360 S   0.3 16.7   0:50.79 java</span><br></pre></td></tr></table></figure>\n<h4 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h4><p>用ufw管理防火墙和开放端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.安装</span><br><span class=\"line\">sudo apt-get install ufw</span><br><span class=\"line\">2.启用</span><br><span class=\"line\">sudo ufw enable</span><br><span class=\"line\">sudo ufw default deny</span><br><span class=\"line\">运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。关闭所有外部对本机的访问，但本机访问外部正常。</span><br><span class=\"line\">3.开启/禁用</span><br><span class=\"line\">sudo ufw allow|deny [service]</span><br><span class=\"line\">打开或关闭某个端口，例如：</span><br><span class=\"line\">sudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class=\"line\">sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class=\"line\">sudo ufw allow 53 允许外部访问53端口(tcp/udp)</span><br><span class=\"line\">sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口</span><br><span class=\"line\">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53</span><br><span class=\"line\">sudo ufw deny smtp 禁止外部访问smtp服务</span><br><span class=\"line\">sudo ufw delete allow smtp 删除上面建立的某条规则</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar –xvf file.tar //解压 tar包</span><br><span class=\"line\">tar -xzvf file.tar.gz //解压tar.gz</span><br><span class=\"line\">tar -xjvf file.tar.bz2 //解压 tar.bz2</span><br><span class=\"line\">tar –xZvf file.tar.Z //解压tar.Z</span><br><span class=\"line\">unrar e file.rar //解压rar</span><br><span class=\"line\">unzip file.zip //解压zip</span><br></pre></td></tr></table></figure>\n<ol>\n<li>.tar 用 tar –xvf 解压</li>\n<li>.gz 用 gzip -d或者gunzip 解压</li>\n<li>.tar.gz和.tgz 用 tar –xzf 解压</li>\n<li>.bz2 用 bzip2 -d或者用bunzip2 解压</li>\n<li>.tar.bz2用tar –xjf 解压</li>\n<li>.Z 用 uncompress 解压</li>\n<li>.tar.Z 用tar –xZf 解压</li>\n<li>.rar 用 unrar e解压</li>\n<li>.zip 用 unzip 解压</li>\n</ol>\n<hr>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><h4 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h4><p>例子：将目录A重命名为B</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv A B</span><br></pre></td></tr></table></figure>\n<h4 id=\"移动文件\"><a href=\"#移动文件\" class=\"headerlink\" title=\"移动文件\"></a>移动文件</h4><p>例子：将/a目录移动到/b下，并重命名为c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /a /b/c</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看内存占用\"><a href=\"#查看内存占用\" class=\"headerlink\" title=\"查看内存占用\"></a>查看内存占用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo atop</span><br><span class=\"line\">free -h</span><br><span class=\"line\">top</span><br></pre></td></tr></table></figure>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">czh       25068   1702  3 19:08 ?        00:00:50 /usr/bin/java -Djava.util.logging.config.file=/home/czh/tomcat9/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /home/czh/tomcat9/bin/bootstrap.jar:/home/czh/tomcat9/bin/tomcat-juli.jar -Dcatalina.base=/home/czh/tomcat9 -Dcatalina.home=/home/czh/tomcat9 -Djava.io.tmpdir=/home/czh/tomcat9/temp org.apache.catalina.startup.Bootstrap start</span><br><span class=\"line\">czh       29588  29549  0 19:32 pts/0    00:00:00 grep --color=auto java</span><br></pre></td></tr></table></figure>\n<p>查到了java的进程id为 25068</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -p 25068</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">25068 czh       20   0 4102344 668584  16360 S   0.3 16.7   0:50.79 java</span><br></pre></td></tr></table></figure>\n<h4 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h4><p>用ufw管理防火墙和开放端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.安装</span><br><span class=\"line\">sudo apt-get install ufw</span><br><span class=\"line\">2.启用</span><br><span class=\"line\">sudo ufw enable</span><br><span class=\"line\">sudo ufw default deny</span><br><span class=\"line\">运行以上两条命令后，开启了防火墙，并在系统启动时自动开启。关闭所有外部对本机的访问，但本机访问外部正常。</span><br><span class=\"line\">3.开启/禁用</span><br><span class=\"line\">sudo ufw allow|deny [service]</span><br><span class=\"line\">打开或关闭某个端口，例如：</span><br><span class=\"line\">sudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class=\"line\">sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class=\"line\">sudo ufw allow 53 允许外部访问53端口(tcp/udp)</span><br><span class=\"line\">sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口</span><br><span class=\"line\">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53</span><br><span class=\"line\">sudo ufw deny smtp 禁止外部访问smtp服务</span><br><span class=\"line\">sudo ufw delete allow smtp 删除上面建立的某条规则</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Spring Security笔记","date":"2019-04-08T03:21:36.000Z","_content":"## 常用的接口\n#### WebSecurityConfigurerAdapter\nWebSecurityConfigurerAdapter主要用于配置Spring Security\n\n#### UserDetail\n一个包含用户信息和权限信息的类\n\n#### UserDetailsService\n用户给Spring Security返回一个UserDetail。把该接口的实现类配置成Spring Bean, Spring Security会默认使用该类返回的UserDetail来验权等操作\n\n#### 大致流程\n1. 用户提交用户名和密码，后端将密码加密有和数据库密码比对。如果一样，返回JWT\n1. 用户使用JWT请求其他接口。后端获取用户名后从数据库中获取用户详细信息，然后校验权限和返回数据\n","source":"_posts/Spring-Security笔记.md","raw":"---\ntitle: Spring Security笔记\ndate: 2019-04-08 11:21:36\ntags:\n---\n## 常用的接口\n#### WebSecurityConfigurerAdapter\nWebSecurityConfigurerAdapter主要用于配置Spring Security\n\n#### UserDetail\n一个包含用户信息和权限信息的类\n\n#### UserDetailsService\n用户给Spring Security返回一个UserDetail。把该接口的实现类配置成Spring Bean, Spring Security会默认使用该类返回的UserDetail来验权等操作\n\n#### 大致流程\n1. 用户提交用户名和密码，后端将密码加密有和数据库密码比对。如果一样，返回JWT\n1. 用户使用JWT请求其他接口。后端获取用户名后从数据库中获取用户详细信息，然后校验权限和返回数据\n","slug":"Spring-Security笔记","published":1,"updated":"2019-04-08T07:41:00.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9ueg0002zoulbuf97oqz","content":"<h2 id=\"常用的接口\"><a href=\"#常用的接口\" class=\"headerlink\" title=\"常用的接口\"></a>常用的接口</h2><h4 id=\"WebSecurityConfigurerAdapter\"><a href=\"#WebSecurityConfigurerAdapter\" class=\"headerlink\" title=\"WebSecurityConfigurerAdapter\"></a>WebSecurityConfigurerAdapter</h4><p>WebSecurityConfigurerAdapter主要用于配置Spring Security</p>\n<h4 id=\"UserDetail\"><a href=\"#UserDetail\" class=\"headerlink\" title=\"UserDetail\"></a>UserDetail</h4><p>一个包含用户信息和权限信息的类</p>\n<h4 id=\"UserDetailsService\"><a href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"></a>UserDetailsService</h4><p>用户给Spring Security返回一个UserDetail。把该接口的实现类配置成Spring Bean, Spring Security会默认使用该类返回的UserDetail来验权等操作</p>\n<h4 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h4><ol>\n<li>用户提交用户名和密码，后端将密码加密有和数据库密码比对。如果一样，返回JWT</li>\n<li>用户使用JWT请求其他接口。后端获取用户名后从数据库中获取用户详细信息，然后校验权限和返回数据</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用的接口\"><a href=\"#常用的接口\" class=\"headerlink\" title=\"常用的接口\"></a>常用的接口</h2><h4 id=\"WebSecurityConfigurerAdapter\"><a href=\"#WebSecurityConfigurerAdapter\" class=\"headerlink\" title=\"WebSecurityConfigurerAdapter\"></a>WebSecurityConfigurerAdapter</h4><p>WebSecurityConfigurerAdapter主要用于配置Spring Security</p>\n<h4 id=\"UserDetail\"><a href=\"#UserDetail\" class=\"headerlink\" title=\"UserDetail\"></a>UserDetail</h4><p>一个包含用户信息和权限信息的类</p>\n<h4 id=\"UserDetailsService\"><a href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"></a>UserDetailsService</h4><p>用户给Spring Security返回一个UserDetail。把该接口的实现类配置成Spring Bean, Spring Security会默认使用该类返回的UserDetail来验权等操作</p>\n<h4 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h4><ol>\n<li>用户提交用户名和密码，后端将密码加密有和数据库密码比对。如果一样，返回JWT</li>\n<li>用户使用JWT请求其他接口。后端获取用户名后从数据库中获取用户详细信息，然后校验权限和返回数据</li>\n</ol>\n"},{"title":"debug的一些方法","date":"2018-05-08T09:28:33.000Z","_content":"### debug的一些方法\n**前面方法不分前后顺序**\n1. 确认问题的具体信息\n>出现问题时一定要尽可能的收集错误信息，便于追踪问题\n2. 查找日志和数据库信息\n>在日志中查找出现问题的地方和出问题部分的数据库数据\n3. 重现问题\n>只有重现问题的时候才能调试。尝试修复bug后，通过重现问题检测bug修复情况\n\n### 总结\ndebug方法：复现，查数据库中的数据，log，断点，测试\n","source":"_posts/debug的一些方法.md","raw":"---\ntitle: debug的一些方法\ndate: 2018-05-08 17:28:33\ntags:\n---\n### debug的一些方法\n**前面方法不分前后顺序**\n1. 确认问题的具体信息\n>出现问题时一定要尽可能的收集错误信息，便于追踪问题\n2. 查找日志和数据库信息\n>在日志中查找出现问题的地方和出问题部分的数据库数据\n3. 重现问题\n>只有重现问题的时候才能调试。尝试修复bug后，通过重现问题检测bug修复情况\n\n### 总结\ndebug方法：复现，查数据库中的数据，log，断点，测试\n","slug":"debug的一些方法","published":1,"updated":"2019-04-10T03:56:07.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9ueh0003zoulfg1nblsz","content":"<h3 id=\"debug的一些方法\"><a href=\"#debug的一些方法\" class=\"headerlink\" title=\"debug的一些方法\"></a>debug的一些方法</h3><p><strong>前面方法不分前后顺序</strong></p>\n<ol>\n<li>确认问题的具体信息<blockquote>\n<p>出现问题时一定要尽可能的收集错误信息，便于追踪问题</p>\n</blockquote>\n</li>\n<li>查找日志和数据库信息<blockquote>\n<p>在日志中查找出现问题的地方和出问题部分的数据库数据</p>\n</blockquote>\n</li>\n<li>重现问题<blockquote>\n<p>只有重现问题的时候才能调试。尝试修复bug后，通过重现问题检测bug修复情况</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>debug方法：复现，查数据库中的数据，log，断点，测试</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"debug的一些方法\"><a href=\"#debug的一些方法\" class=\"headerlink\" title=\"debug的一些方法\"></a>debug的一些方法</h3><p><strong>前面方法不分前后顺序</strong></p>\n<ol>\n<li>确认问题的具体信息<blockquote>\n<p>出现问题时一定要尽可能的收集错误信息，便于追踪问题</p>\n</blockquote>\n</li>\n<li>查找日志和数据库信息<blockquote>\n<p>在日志中查找出现问题的地方和出问题部分的数据库数据</p>\n</blockquote>\n</li>\n<li>重现问题<blockquote>\n<p>只有重现问题的时候才能调试。尝试修复bug后，通过重现问题检测bug修复情况</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>debug方法：复现，查数据库中的数据，log，断点，测试</p>\n"},{"title":"api迭代","date":"2018-05-03T01:06:28.000Z","_content":"\n### API迭代总结\n\n1. 升级要兼容旧版接口\n2. 坚持开闭原则(扩展开放，对修改关闭)\n3. 代码要符合最新定义的协议，不能存在部分没有升级的情况\n4. 注意生产环境和开发环境的代码和数据同步问题\n\n","source":"_posts/api迭代.md","raw":"---\ntitle: api迭代\ndate: 2018-05-03 09:06:28\ntags:\n---\n\n### API迭代总结\n\n1. 升级要兼容旧版接口\n2. 坚持开闭原则(扩展开放，对修改关闭)\n3. 代码要符合最新定义的协议，不能存在部分没有升级的情况\n4. 注意生产环境和开发环境的代码和数据同步问题\n\n","slug":"api迭代","published":1,"updated":"2019-04-08T01:45:35.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9uei0004zoulm5lcrsrf","content":"<h3 id=\"API迭代总结\"><a href=\"#API迭代总结\" class=\"headerlink\" title=\"API迭代总结\"></a>API迭代总结</h3><ol>\n<li>升级要兼容旧版接口</li>\n<li>坚持开闭原则(扩展开放，对修改关闭)</li>\n<li>代码要符合最新定义的协议，不能存在部分没有升级的情况</li>\n<li>注意生产环境和开发环境的代码和数据同步问题</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"API迭代总结\"><a href=\"#API迭代总结\" class=\"headerlink\" title=\"API迭代总结\"></a>API迭代总结</h3><ol>\n<li>升级要兼容旧版接口</li>\n<li>坚持开闭原则(扩展开放，对修改关闭)</li>\n<li>代码要符合最新定义的协议，不能存在部分没有升级的情况</li>\n<li>注意生产环境和开发环境的代码和数据同步问题</li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-08T01:45:35.930Z","updated":"2019-04-08T01:45:35.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9uej0005zoulfzp7zaqd","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"前后端分离的重要性","date":"2018-05-03T02:18:49.000Z","_content":"\n### 前后端分离的意义和重要性（待完善）\n\n#### 技术方面\n1. 前后端分开迭代，前端或后端需要频繁迭代时不影响另一端（修改数据逻辑不影响显示逻辑）\n1. 分离数据逻辑和表现逻辑(前后端耦合容易造成数据逻辑与表现逻辑混杂不清,这点在debug的时候尤其痛苦)\n1. 展示类，管理类（CMS）项目强烈建议前后端分离\n1. 前后端解耦方便维护（解耦有多重要就不多说了）。后端专注于提供数据，维护系统稳定，保证数据安全可靠（数据逻辑）。前端专注于交互和ui（表现逻辑）\n1. 可以个APP端和web端提供统一的接口（同样的业务逻辑如果要写N遍，头疼，debug或加功能还要加N遍，心烦）\n\n#### 人员方面\n1. 可以让每个员工变的更加专注，发挥TA自己最大的能力。前后端分离是为了更好的协作，在组织和流程上更加容易管理和达到更高的效率\n2. 技术人员往往只能精通一个方面的技术（靠谱的全栈工程师还是少，或者说全栈工程师只是某个技术栈的全栈工程师）\n\n#### 综合方面\n1. 前后端分离对人员和技术的要求更低\n\n**前后端分离是指技术架构上的分离，而不是组织/流程、职位/工种的分离**","source":"_posts/前后端分离的重要性.md","raw":"---\ntitle: 前后端分离的重要性\ndate: 2018-05-03 10:18:49\ntags:\n---\n\n### 前后端分离的意义和重要性（待完善）\n\n#### 技术方面\n1. 前后端分开迭代，前端或后端需要频繁迭代时不影响另一端（修改数据逻辑不影响显示逻辑）\n1. 分离数据逻辑和表现逻辑(前后端耦合容易造成数据逻辑与表现逻辑混杂不清,这点在debug的时候尤其痛苦)\n1. 展示类，管理类（CMS）项目强烈建议前后端分离\n1. 前后端解耦方便维护（解耦有多重要就不多说了）。后端专注于提供数据，维护系统稳定，保证数据安全可靠（数据逻辑）。前端专注于交互和ui（表现逻辑）\n1. 可以个APP端和web端提供统一的接口（同样的业务逻辑如果要写N遍，头疼，debug或加功能还要加N遍，心烦）\n\n#### 人员方面\n1. 可以让每个员工变的更加专注，发挥TA自己最大的能力。前后端分离是为了更好的协作，在组织和流程上更加容易管理和达到更高的效率\n2. 技术人员往往只能精通一个方面的技术（靠谱的全栈工程师还是少，或者说全栈工程师只是某个技术栈的全栈工程师）\n\n#### 综合方面\n1. 前后端分离对人员和技术的要求更低\n\n**前后端分离是指技术架构上的分离，而不是组织/流程、职位/工种的分离**","slug":"前后端分离的重要性","published":1,"updated":"2019-04-08T01:45:35.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9uel0006zoulammnh5ez","content":"<h3 id=\"前后端分离的意义和重要性（待完善）\"><a href=\"#前后端分离的意义和重要性（待完善）\" class=\"headerlink\" title=\"前后端分离的意义和重要性（待完善）\"></a>前后端分离的意义和重要性（待完善）</h3><h4 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h4><ol>\n<li>前后端分开迭代，前端或后端需要频繁迭代时不影响另一端（修改数据逻辑不影响显示逻辑）</li>\n<li>分离数据逻辑和表现逻辑(前后端耦合容易造成数据逻辑与表现逻辑混杂不清,这点在debug的时候尤其痛苦)</li>\n<li>展示类，管理类（CMS）项目强烈建议前后端分离</li>\n<li>前后端解耦方便维护（解耦有多重要就不多说了）。后端专注于提供数据，维护系统稳定，保证数据安全可靠（数据逻辑）。前端专注于交互和ui（表现逻辑）</li>\n<li>可以个APP端和web端提供统一的接口（同样的业务逻辑如果要写N遍，头疼，debug或加功能还要加N遍，心烦）</li>\n</ol>\n<h4 id=\"人员方面\"><a href=\"#人员方面\" class=\"headerlink\" title=\"人员方面\"></a>人员方面</h4><ol>\n<li>可以让每个员工变的更加专注，发挥TA自己最大的能力。前后端分离是为了更好的协作，在组织和流程上更加容易管理和达到更高的效率</li>\n<li>技术人员往往只能精通一个方面的技术（靠谱的全栈工程师还是少，或者说全栈工程师只是某个技术栈的全栈工程师）</li>\n</ol>\n<h4 id=\"综合方面\"><a href=\"#综合方面\" class=\"headerlink\" title=\"综合方面\"></a>综合方面</h4><ol>\n<li>前后端分离对人员和技术的要求更低</li>\n</ol>\n<p><strong>前后端分离是指技术架构上的分离，而不是组织/流程、职位/工种的分离</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前后端分离的意义和重要性（待完善）\"><a href=\"#前后端分离的意义和重要性（待完善）\" class=\"headerlink\" title=\"前后端分离的意义和重要性（待完善）\"></a>前后端分离的意义和重要性（待完善）</h3><h4 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h4><ol>\n<li>前后端分开迭代，前端或后端需要频繁迭代时不影响另一端（修改数据逻辑不影响显示逻辑）</li>\n<li>分离数据逻辑和表现逻辑(前后端耦合容易造成数据逻辑与表现逻辑混杂不清,这点在debug的时候尤其痛苦)</li>\n<li>展示类，管理类（CMS）项目强烈建议前后端分离</li>\n<li>前后端解耦方便维护（解耦有多重要就不多说了）。后端专注于提供数据，维护系统稳定，保证数据安全可靠（数据逻辑）。前端专注于交互和ui（表现逻辑）</li>\n<li>可以个APP端和web端提供统一的接口（同样的业务逻辑如果要写N遍，头疼，debug或加功能还要加N遍，心烦）</li>\n</ol>\n<h4 id=\"人员方面\"><a href=\"#人员方面\" class=\"headerlink\" title=\"人员方面\"></a>人员方面</h4><ol>\n<li>可以让每个员工变的更加专注，发挥TA自己最大的能力。前后端分离是为了更好的协作，在组织和流程上更加容易管理和达到更高的效率</li>\n<li>技术人员往往只能精通一个方面的技术（靠谱的全栈工程师还是少，或者说全栈工程师只是某个技术栈的全栈工程师）</li>\n</ol>\n<h4 id=\"综合方面\"><a href=\"#综合方面\" class=\"headerlink\" title=\"综合方面\"></a>综合方面</h4><ol>\n<li>前后端分离对人员和技术的要求更低</li>\n</ol>\n<p><strong>前后端分离是指技术架构上的分离，而不是组织/流程、职位/工种的分离</strong></p>\n"},{"title":"事务","date":"2018-05-22T02:36:29.000Z","_content":"#### 首先先复习一下事务的基本知识\n##### 事务介绍\n事务（Transaction），在计算机中一般指对数据库众各种数据项的一个程序执行单元（对数据库的一组操作）。通过事务可以保证一个执行单元内的操作都成功时才更新数据的数据项，否则不会更新数据库。即我们常说的要么全部成功，要么全部失败。  \n\n##### 事务的四个特性\n* 原子性（Atomic）\n>原子在物理上是不可分割的，表示事务内的操作也是不可分割的，是一体的，所以原子性是指事务要么全部成功，要么全部失败。\n* 一致性\n> 忘了，回去翻书。大致上是指事务执行是从一个一致性状态转为另一个一致性状态\n* 隔离性\n> 在并发过程中，可能会有多个事务在处理形同的数据。事务之间不能互相干扰，多个事务之间要互相隔离\n* 持久性\n> 持久性是指事务提交后，对数据库的修改是永久性的  \n\n##### 多个事务并发带来的问题\n* 脏读（Dirty reads）\n> 指一个事务读取到另一个事务修改但未提交的数据。如果修改数据事务回滚会导致读取数据事务获取到错误数据\n* 不可重复读（Nonrepeatable read）\n> 指一个事务内对同一个数据进行多次查询的到不同的结果。通常是查询间隔期间其他事务修改导致\n* 幻读（Phantom read）\n> 与不可重复读类似。指一个事务对一些数据的多次查询得到的数量不一致。通常是查询间隔期间其他事务插入或删除数据导致   \n\n**PS：不可重复读重点是修改，幻读重点是插入和删除**\n\n##### 事务隔离\n事务隔离和并发控制类似，都是通过锁来实现的\n**数据库中的各种锁我就不介绍了，用兴趣的同学可以自己找一下资料，这里只介绍数据库中常见的事务隔离级别**\n|事务级别|脏读|不可重复读|幻读|\n|---|---|---|---|\n|READ_UNCOMMITTED|允许|允许|允许|\n|READ_COMMITTED|禁止|允许|允许|\n|REPEATABLE_READ|禁止|禁止|允许|\n|SERIALIZABLE|禁止|禁止|禁止|\nMySQL默认的事务级别是READ_COMMITTED  \n\nps：除了数据库的事务级别外，各种库和框架还实现了一些关于事务的其他功能。例如JDBC的数据隔离级别，spirng的事务传播和spirng自己的事务隔离级别。无论是数据库实现还是库、框架实现的功能都是程序员平时需要用到的  \n\n**上面这些都是数据库实现的，下面是实践和代码层面的知识**\n\n#### spring中的事务（未完待续）\n##### spring事务传播\n##### spring事务隔离级别\n##### spring编程式事务和生明式事务\n##### \n","source":"_posts/事务.md","raw":"---\ntitle: 事务\ndate: 2018-05-22 10:36:29\ntags:\n---\n#### 首先先复习一下事务的基本知识\n##### 事务介绍\n事务（Transaction），在计算机中一般指对数据库众各种数据项的一个程序执行单元（对数据库的一组操作）。通过事务可以保证一个执行单元内的操作都成功时才更新数据的数据项，否则不会更新数据库。即我们常说的要么全部成功，要么全部失败。  \n\n##### 事务的四个特性\n* 原子性（Atomic）\n>原子在物理上是不可分割的，表示事务内的操作也是不可分割的，是一体的，所以原子性是指事务要么全部成功，要么全部失败。\n* 一致性\n> 忘了，回去翻书。大致上是指事务执行是从一个一致性状态转为另一个一致性状态\n* 隔离性\n> 在并发过程中，可能会有多个事务在处理形同的数据。事务之间不能互相干扰，多个事务之间要互相隔离\n* 持久性\n> 持久性是指事务提交后，对数据库的修改是永久性的  \n\n##### 多个事务并发带来的问题\n* 脏读（Dirty reads）\n> 指一个事务读取到另一个事务修改但未提交的数据。如果修改数据事务回滚会导致读取数据事务获取到错误数据\n* 不可重复读（Nonrepeatable read）\n> 指一个事务内对同一个数据进行多次查询的到不同的结果。通常是查询间隔期间其他事务修改导致\n* 幻读（Phantom read）\n> 与不可重复读类似。指一个事务对一些数据的多次查询得到的数量不一致。通常是查询间隔期间其他事务插入或删除数据导致   \n\n**PS：不可重复读重点是修改，幻读重点是插入和删除**\n\n##### 事务隔离\n事务隔离和并发控制类似，都是通过锁来实现的\n**数据库中的各种锁我就不介绍了，用兴趣的同学可以自己找一下资料，这里只介绍数据库中常见的事务隔离级别**\n|事务级别|脏读|不可重复读|幻读|\n|---|---|---|---|\n|READ_UNCOMMITTED|允许|允许|允许|\n|READ_COMMITTED|禁止|允许|允许|\n|REPEATABLE_READ|禁止|禁止|允许|\n|SERIALIZABLE|禁止|禁止|禁止|\nMySQL默认的事务级别是READ_COMMITTED  \n\nps：除了数据库的事务级别外，各种库和框架还实现了一些关于事务的其他功能。例如JDBC的数据隔离级别，spirng的事务传播和spirng自己的事务隔离级别。无论是数据库实现还是库、框架实现的功能都是程序员平时需要用到的  \n\n**上面这些都是数据库实现的，下面是实践和代码层面的知识**\n\n#### spring中的事务（未完待续）\n##### spring事务传播\n##### spring事务隔离级别\n##### spring编程式事务和生明式事务\n##### \n","slug":"事务","published":1,"updated":"2019-04-08T01:45:35.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9uem0007zoul4t0k45v1","content":"<h4 id=\"首先先复习一下事务的基本知识\"><a href=\"#首先先复习一下事务的基本知识\" class=\"headerlink\" title=\"首先先复习一下事务的基本知识\"></a>首先先复习一下事务的基本知识</h4><h5 id=\"事务介绍\"><a href=\"#事务介绍\" class=\"headerlink\" title=\"事务介绍\"></a>事务介绍</h5><p>事务（Transaction），在计算机中一般指对数据库众各种数据项的一个程序执行单元（对数据库的一组操作）。通过事务可以保证一个执行单元内的操作都成功时才更新数据的数据项，否则不会更新数据库。即我们常说的要么全部成功，要么全部失败。  </p>\n<h5 id=\"事务的四个特性\"><a href=\"#事务的四个特性\" class=\"headerlink\" title=\"事务的四个特性\"></a>事务的四个特性</h5><ul>\n<li>原子性（Atomic）<blockquote>\n<p>原子在物理上是不可分割的，表示事务内的操作也是不可分割的，是一体的，所以原子性是指事务要么全部成功，要么全部失败。</p>\n</blockquote>\n</li>\n<li>一致性<blockquote>\n<p>忘了，回去翻书。大致上是指事务执行是从一个一致性状态转为另一个一致性状态</p>\n</blockquote>\n</li>\n<li>隔离性<blockquote>\n<p>在并发过程中，可能会有多个事务在处理形同的数据。事务之间不能互相干扰，多个事务之间要互相隔离</p>\n</blockquote>\n</li>\n<li>持久性<blockquote>\n<p>持久性是指事务提交后，对数据库的修改是永久性的  </p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"多个事务并发带来的问题\"><a href=\"#多个事务并发带来的问题\" class=\"headerlink\" title=\"多个事务并发带来的问题\"></a>多个事务并发带来的问题</h5><ul>\n<li>脏读（Dirty reads）<blockquote>\n<p>指一个事务读取到另一个事务修改但未提交的数据。如果修改数据事务回滚会导致读取数据事务获取到错误数据</p>\n</blockquote>\n</li>\n<li>不可重复读（Nonrepeatable read）<blockquote>\n<p>指一个事务内对同一个数据进行多次查询的到不同的结果。通常是查询间隔期间其他事务修改导致</p>\n</blockquote>\n</li>\n<li>幻读（Phantom read）<blockquote>\n<p>与不可重复读类似。指一个事务对一些数据的多次查询得到的数量不一致。通常是查询间隔期间其他事务插入或删除数据导致   </p>\n</blockquote>\n</li>\n</ul>\n<p><strong>PS：不可重复读重点是修改，幻读重点是插入和删除</strong></p>\n<h5 id=\"事务隔离\"><a href=\"#事务隔离\" class=\"headerlink\" title=\"事务隔离\"></a>事务隔离</h5><p>事务隔离和并发控制类似，都是通过锁来实现的<br><strong>数据库中的各种锁我就不介绍了，用兴趣的同学可以自己找一下资料，这里只介绍数据库中常见的事务隔离级别</strong><br>|事务级别|脏读|不可重复读|幻读|<br>|—|—|—|—|<br>|READ_UNCOMMITTED|允许|允许|允许|<br>|READ_COMMITTED|禁止|允许|允许|<br>|REPEATABLE_READ|禁止|禁止|允许|<br>|SERIALIZABLE|禁止|禁止|禁止|<br>MySQL默认的事务级别是READ_COMMITTED  </p>\n<p>ps：除了数据库的事务级别外，各种库和框架还实现了一些关于事务的其他功能。例如JDBC的数据隔离级别，spirng的事务传播和spirng自己的事务隔离级别。无论是数据库实现还是库、框架实现的功能都是程序员平时需要用到的  </p>\n<p><strong>上面这些都是数据库实现的，下面是实践和代码层面的知识</strong></p>\n<h4 id=\"spring中的事务（未完待续）\"><a href=\"#spring中的事务（未完待续）\" class=\"headerlink\" title=\"spring中的事务（未完待续）\"></a>spring中的事务（未完待续）</h4><h5 id=\"spring事务传播\"><a href=\"#spring事务传播\" class=\"headerlink\" title=\"spring事务传播\"></a>spring事务传播</h5><h5 id=\"spring事务隔离级别\"><a href=\"#spring事务隔离级别\" class=\"headerlink\" title=\"spring事务隔离级别\"></a>spring事务隔离级别</h5><h5 id=\"spring编程式事务和生明式事务\"><a href=\"#spring编程式事务和生明式事务\" class=\"headerlink\" title=\"spring编程式事务和生明式事务\"></a>spring编程式事务和生明式事务</h5><p>##### </p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"首先先复习一下事务的基本知识\"><a href=\"#首先先复习一下事务的基本知识\" class=\"headerlink\" title=\"首先先复习一下事务的基本知识\"></a>首先先复习一下事务的基本知识</h4><h5 id=\"事务介绍\"><a href=\"#事务介绍\" class=\"headerlink\" title=\"事务介绍\"></a>事务介绍</h5><p>事务（Transaction），在计算机中一般指对数据库众各种数据项的一个程序执行单元（对数据库的一组操作）。通过事务可以保证一个执行单元内的操作都成功时才更新数据的数据项，否则不会更新数据库。即我们常说的要么全部成功，要么全部失败。  </p>\n<h5 id=\"事务的四个特性\"><a href=\"#事务的四个特性\" class=\"headerlink\" title=\"事务的四个特性\"></a>事务的四个特性</h5><ul>\n<li>原子性（Atomic）<blockquote>\n<p>原子在物理上是不可分割的，表示事务内的操作也是不可分割的，是一体的，所以原子性是指事务要么全部成功，要么全部失败。</p>\n</blockquote>\n</li>\n<li>一致性<blockquote>\n<p>忘了，回去翻书。大致上是指事务执行是从一个一致性状态转为另一个一致性状态</p>\n</blockquote>\n</li>\n<li>隔离性<blockquote>\n<p>在并发过程中，可能会有多个事务在处理形同的数据。事务之间不能互相干扰，多个事务之间要互相隔离</p>\n</blockquote>\n</li>\n<li>持久性<blockquote>\n<p>持久性是指事务提交后，对数据库的修改是永久性的  </p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"多个事务并发带来的问题\"><a href=\"#多个事务并发带来的问题\" class=\"headerlink\" title=\"多个事务并发带来的问题\"></a>多个事务并发带来的问题</h5><ul>\n<li>脏读（Dirty reads）<blockquote>\n<p>指一个事务读取到另一个事务修改但未提交的数据。如果修改数据事务回滚会导致读取数据事务获取到错误数据</p>\n</blockquote>\n</li>\n<li>不可重复读（Nonrepeatable read）<blockquote>\n<p>指一个事务内对同一个数据进行多次查询的到不同的结果。通常是查询间隔期间其他事务修改导致</p>\n</blockquote>\n</li>\n<li>幻读（Phantom read）<blockquote>\n<p>与不可重复读类似。指一个事务对一些数据的多次查询得到的数量不一致。通常是查询间隔期间其他事务插入或删除数据导致   </p>\n</blockquote>\n</li>\n</ul>\n<p><strong>PS：不可重复读重点是修改，幻读重点是插入和删除</strong></p>\n<h5 id=\"事务隔离\"><a href=\"#事务隔离\" class=\"headerlink\" title=\"事务隔离\"></a>事务隔离</h5><p>事务隔离和并发控制类似，都是通过锁来实现的<br><strong>数据库中的各种锁我就不介绍了，用兴趣的同学可以自己找一下资料，这里只介绍数据库中常见的事务隔离级别</strong><br>|事务级别|脏读|不可重复读|幻读|<br>|—|—|—|—|<br>|READ_UNCOMMITTED|允许|允许|允许|<br>|READ_COMMITTED|禁止|允许|允许|<br>|REPEATABLE_READ|禁止|禁止|允许|<br>|SERIALIZABLE|禁止|禁止|禁止|<br>MySQL默认的事务级别是READ_COMMITTED  </p>\n<p>ps：除了数据库的事务级别外，各种库和框架还实现了一些关于事务的其他功能。例如JDBC的数据隔离级别，spirng的事务传播和spirng自己的事务隔离级别。无论是数据库实现还是库、框架实现的功能都是程序员平时需要用到的  </p>\n<p><strong>上面这些都是数据库实现的，下面是实践和代码层面的知识</strong></p>\n<h4 id=\"spring中的事务（未完待续）\"><a href=\"#spring中的事务（未完待续）\" class=\"headerlink\" title=\"spring中的事务（未完待续）\"></a>spring中的事务（未完待续）</h4><h5 id=\"spring事务传播\"><a href=\"#spring事务传播\" class=\"headerlink\" title=\"spring事务传播\"></a>spring事务传播</h5><h5 id=\"spring事务隔离级别\"><a href=\"#spring事务隔离级别\" class=\"headerlink\" title=\"spring事务隔离级别\"></a>spring事务隔离级别</h5><h5 id=\"spring编程式事务和生明式事务\"><a href=\"#spring编程式事务和生明式事务\" class=\"headerlink\" title=\"spring编程式事务和生明式事务\"></a>spring编程式事务和生明式事务</h5><p>##### </p>\n"},{"title":"编程语言强类型、弱类型、静态类型、动态类型的区别","date":"2018-05-04T03:40:52.000Z","_content":"\n### 编程语言强类型、弱类型、静态类型、动态类型的区别\n之前一直没有好好了解编程语言类型的区别，现在来补补课。  \n\n引用一个轮子哥的回答，判断语言类型的区别如下\n>强类型：偏向于不容忍隐式类型转换。譬如说haskell的int就不能变成double\n>弱类型：偏向于容忍隐式类型转换。譬如说C语言的int可以变成double\n>静态类型：编译的时候就知道每一个变量的类型，因为类型错误而不能做的事情是语法错误。\n>动态类型：编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。譬如说你不能对一个数字a写a[10]当数组用。\n  \n上述引用可以作为一般的判断规则\n\n下面是主流编程语言的类型划分图  \n\n![Alt language](/images/programming_language.jpg)    \n\n**下面用javascript, python, java说明一下**\n先了解一个概念\n##### 类型安全\n>类型安全就是说，同一段内存，在不同的地方，会被强制要求使用相同的办法来解释（interpret）\n>类型安全代码只访问被授权可以访问的内存位置。\n\n#### 强类型和弱类型\n强弱类型是指语言类型系统对类型检查的严格程度。强类型语言指定了数据类型后，如果不经过强制类型转换，他将永远是这个数据类型。弱类型刚好相反，他允许编译器进行隐式类型转换。 不是类型安全的 \n**下面举2个例子**  \njavascript是弱类型语言，允许隐式类型转换，int类型的2会被转换成String类型的\"2\"，所以得到的a = \"12\"\n```javascript\nvar a = \"1\" + 2;\n```\n而python是强类型语言，不允许隐式类型转换。所以下面的代码会报错并提示类型错误。是类型安全的\n```python\na = \"1\" + 2\n\nTraceback (most recent call last):\n  File \"test.py\", line 1, in <module>\n    a = \"1\" + 2\nTypeError: must be str, not int\n```  \n\n#### 静态和动态类型\n动态类型在运行时才确定变量类型和执行类型检查，已python为例\n```python\n>>> a = 1\n>>> type(a)\n<type 'int'>\n>>> a = \"s\"\n>>> type(a)\n<type 'str'>\n```  \n静态语言在编译时就可以知道变量类型和执行类型检查，已java为例，在执行javac的时候就会报错，提示类型错误\n```java\nint a = \"a\";\n\nTest.java:3: 错误: 不兼容的类型: String无法转换为int\n        int a = \"a\";\n                ^\n1 个错误\n```  \n如果只是简单的了解一下编程语言强类型、弱类型、静态类型、动态类型的区别，读到这里就可以了。下面是关于编程语言强类型、弱类型、静态类型、动态类型区别的详细和深层次的分析，涉及一下比较专业的名词和知识。\n\n---\n（待续）\n\n发现一遍比较详细的文章可以读一下，[数据类型](http://linianhui.cnblogs.com/p/plp-04-datatypes.html \"数据类型\")  \n\n\n\n","source":"_posts/编程语言强类型、弱类型、静态类型、动态类型的区别.md","raw":"---\ntitle: 编程语言强类型、弱类型、静态类型、动态类型的区别\ndate: 2018-05-04 11:40:52\ntags:\n---\n\n### 编程语言强类型、弱类型、静态类型、动态类型的区别\n之前一直没有好好了解编程语言类型的区别，现在来补补课。  \n\n引用一个轮子哥的回答，判断语言类型的区别如下\n>强类型：偏向于不容忍隐式类型转换。譬如说haskell的int就不能变成double\n>弱类型：偏向于容忍隐式类型转换。譬如说C语言的int可以变成double\n>静态类型：编译的时候就知道每一个变量的类型，因为类型错误而不能做的事情是语法错误。\n>动态类型：编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。譬如说你不能对一个数字a写a[10]当数组用。\n  \n上述引用可以作为一般的判断规则\n\n下面是主流编程语言的类型划分图  \n\n![Alt language](/images/programming_language.jpg)    \n\n**下面用javascript, python, java说明一下**\n先了解一个概念\n##### 类型安全\n>类型安全就是说，同一段内存，在不同的地方，会被强制要求使用相同的办法来解释（interpret）\n>类型安全代码只访问被授权可以访问的内存位置。\n\n#### 强类型和弱类型\n强弱类型是指语言类型系统对类型检查的严格程度。强类型语言指定了数据类型后，如果不经过强制类型转换，他将永远是这个数据类型。弱类型刚好相反，他允许编译器进行隐式类型转换。 不是类型安全的 \n**下面举2个例子**  \njavascript是弱类型语言，允许隐式类型转换，int类型的2会被转换成String类型的\"2\"，所以得到的a = \"12\"\n```javascript\nvar a = \"1\" + 2;\n```\n而python是强类型语言，不允许隐式类型转换。所以下面的代码会报错并提示类型错误。是类型安全的\n```python\na = \"1\" + 2\n\nTraceback (most recent call last):\n  File \"test.py\", line 1, in <module>\n    a = \"1\" + 2\nTypeError: must be str, not int\n```  \n\n#### 静态和动态类型\n动态类型在运行时才确定变量类型和执行类型检查，已python为例\n```python\n>>> a = 1\n>>> type(a)\n<type 'int'>\n>>> a = \"s\"\n>>> type(a)\n<type 'str'>\n```  \n静态语言在编译时就可以知道变量类型和执行类型检查，已java为例，在执行javac的时候就会报错，提示类型错误\n```java\nint a = \"a\";\n\nTest.java:3: 错误: 不兼容的类型: String无法转换为int\n        int a = \"a\";\n                ^\n1 个错误\n```  \n如果只是简单的了解一下编程语言强类型、弱类型、静态类型、动态类型的区别，读到这里就可以了。下面是关于编程语言强类型、弱类型、静态类型、动态类型区别的详细和深层次的分析，涉及一下比较专业的名词和知识。\n\n---\n（待续）\n\n发现一遍比较详细的文章可以读一下，[数据类型](http://linianhui.cnblogs.com/p/plp-04-datatypes.html \"数据类型\")  \n\n\n\n","slug":"编程语言强类型、弱类型、静态类型、动态类型的区别","published":1,"updated":"2019-04-08T01:45:35.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9uen0008zoulcms6sinc","content":"<h3 id=\"编程语言强类型、弱类型、静态类型、动态类型的区别\"><a href=\"#编程语言强类型、弱类型、静态类型、动态类型的区别\" class=\"headerlink\" title=\"编程语言强类型、弱类型、静态类型、动态类型的区别\"></a>编程语言强类型、弱类型、静态类型、动态类型的区别</h3><p>之前一直没有好好了解编程语言类型的区别，现在来补补课。  </p>\n<p>引用一个轮子哥的回答，判断语言类型的区别如下</p>\n<blockquote>\n<p>强类型：偏向于不容忍隐式类型转换。譬如说haskell的int就不能变成double<br>弱类型：偏向于容忍隐式类型转换。譬如说C语言的int可以变成double<br>静态类型：编译的时候就知道每一个变量的类型，因为类型错误而不能做的事情是语法错误。<br>动态类型：编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。譬如说你不能对一个数字a写a[10]当数组用。</p>\n</blockquote>\n<p>上述引用可以作为一般的判断规则</p>\n<p>下面是主流编程语言的类型划分图  </p>\n<p><img src=\"/images/programming_language.jpg\" alt=\"Alt language\">    </p>\n<p><strong>下面用javascript, python, java说明一下</strong><br>先了解一个概念</p>\n<h5 id=\"类型安全\"><a href=\"#类型安全\" class=\"headerlink\" title=\"类型安全\"></a>类型安全</h5><blockquote>\n<p>类型安全就是说，同一段内存，在不同的地方，会被强制要求使用相同的办法来解释（interpret）<br>类型安全代码只访问被授权可以访问的内存位置。</p>\n</blockquote>\n<h4 id=\"强类型和弱类型\"><a href=\"#强类型和弱类型\" class=\"headerlink\" title=\"强类型和弱类型\"></a>强类型和弱类型</h4><p>强弱类型是指语言类型系统对类型检查的严格程度。强类型语言指定了数据类型后，如果不经过强制类型转换，他将永远是这个数据类型。弱类型刚好相反，他允许编译器进行隐式类型转换。 不是类型安全的<br><strong>下面举2个例子</strong><br>javascript是弱类型语言，允许隐式类型转换，int类型的2会被转换成String类型的”2”，所以得到的a = “12”<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"1\"</span> + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>而python是强类型语言，不允许隐式类型转换。所以下面的代码会报错并提示类型错误。是类型安全的</p>\n<pre><code class=\"python\">a = <span class=\"string\">\"1\"</span> + <span class=\"number\">2</span>\n\nTraceback (most recent call last):\n  File <span class=\"string\">\"test.py\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    a = <span class=\"string\">\"1\"</span> + <span class=\"number\">2</span>\nTypeError: must be str, <span class=\"keyword\">not</span> int\n</code></pre>\n<h4 id=\"静态和动态类型\"><a href=\"#静态和动态类型\" class=\"headerlink\" title=\"静态和动态类型\"></a>静态和动态类型</h4><p>动态类型在运行时才确定变量类型和执行类型检查，已python为例</p>\n<pre><code class=\"python\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>type(a)\n&lt;type <span class=\"string\">'int'</span>&gt;\n<span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"s\"</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>type(a)\n&lt;type <span class=\"string\">'str'</span>&gt;\n</code></pre>\n<p>静态语言在编译时就可以知道变量类型和执行类型检查，已java为例，在执行javac的时候就会报错，提示类型错误</p>\n<pre><code class=\"java\"><span class=\"keyword\">int</span> a = <span class=\"string\">\"a\"</span>;\n\nTest.java:<span class=\"number\">3</span>: 错误: 不兼容的类型: String无法转换为<span class=\"keyword\">int</span>\n        <span class=\"keyword\">int</span> a = <span class=\"string\">\"a\"</span>;\n                ^\n<span class=\"number\">1</span> 个错误\n</code></pre>\n<p>如果只是简单的了解一下编程语言强类型、弱类型、静态类型、动态类型的区别，读到这里就可以了。下面是关于编程语言强类型、弱类型、静态类型、动态类型区别的详细和深层次的分析，涉及一下比较专业的名词和知识。</p>\n<hr>\n<p>（待续）</p>\n<p>发现一遍比较详细的文章可以读一下，<a href=\"http://linianhui.cnblogs.com/p/plp-04-datatypes.html\" title=\"数据类型\" target=\"_blank\" rel=\"noopener\">数据类型</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"编程语言强类型、弱类型、静态类型、动态类型的区别\"><a href=\"#编程语言强类型、弱类型、静态类型、动态类型的区别\" class=\"headerlink\" title=\"编程语言强类型、弱类型、静态类型、动态类型的区别\"></a>编程语言强类型、弱类型、静态类型、动态类型的区别</h3><p>之前一直没有好好了解编程语言类型的区别，现在来补补课。  </p>\n<p>引用一个轮子哥的回答，判断语言类型的区别如下</p>\n<blockquote>\n<p>强类型：偏向于不容忍隐式类型转换。譬如说haskell的int就不能变成double<br>弱类型：偏向于容忍隐式类型转换。譬如说C语言的int可以变成double<br>静态类型：编译的时候就知道每一个变量的类型，因为类型错误而不能做的事情是语法错误。<br>动态类型：编译的时候不知道每一个变量的类型，因为类型错误而不能做的事情是运行时错误。譬如说你不能对一个数字a写a[10]当数组用。</p>\n</blockquote>\n<p>上述引用可以作为一般的判断规则</p>\n<p>下面是主流编程语言的类型划分图  </p>\n<p><img src=\"/images/programming_language.jpg\" alt=\"Alt language\">    </p>\n<p><strong>下面用javascript, python, java说明一下</strong><br>先了解一个概念</p>\n<h5 id=\"类型安全\"><a href=\"#类型安全\" class=\"headerlink\" title=\"类型安全\"></a>类型安全</h5><blockquote>\n<p>类型安全就是说，同一段内存，在不同的地方，会被强制要求使用相同的办法来解释（interpret）<br>类型安全代码只访问被授权可以访问的内存位置。</p>\n</blockquote>\n<h4 id=\"强类型和弱类型\"><a href=\"#强类型和弱类型\" class=\"headerlink\" title=\"强类型和弱类型\"></a>强类型和弱类型</h4><p>强弱类型是指语言类型系统对类型检查的严格程度。强类型语言指定了数据类型后，如果不经过强制类型转换，他将永远是这个数据类型。弱类型刚好相反，他允许编译器进行隐式类型转换。 不是类型安全的<br><strong>下面举2个例子</strong><br>javascript是弱类型语言，允许隐式类型转换，int类型的2会被转换成String类型的”2”，所以得到的a = “12”<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"1\"</span> + <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>而python是强类型语言，不允许隐式类型转换。所以下面的代码会报错并提示类型错误。是类型安全的</p>\n<pre><code class=\"python\">a = <span class=\"string\">\"1\"</span> + <span class=\"number\">2</span>\n\nTraceback (most recent call last):\n  File <span class=\"string\">\"test.py\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    a = <span class=\"string\">\"1\"</span> + <span class=\"number\">2</span>\nTypeError: must be str, <span class=\"keyword\">not</span> int\n</code></pre>\n<h4 id=\"静态和动态类型\"><a href=\"#静态和动态类型\" class=\"headerlink\" title=\"静态和动态类型\"></a>静态和动态类型</h4><p>动态类型在运行时才确定变量类型和执行类型检查，已python为例</p>\n<pre><code class=\"python\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>type(a)\n&lt;type <span class=\"string\">'int'</span>&gt;\n<span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"s\"</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>type(a)\n&lt;type <span class=\"string\">'str'</span>&gt;\n</code></pre>\n<p>静态语言在编译时就可以知道变量类型和执行类型检查，已java为例，在执行javac的时候就会报错，提示类型错误</p>\n<pre><code class=\"java\"><span class=\"keyword\">int</span> a = <span class=\"string\">\"a\"</span>;\n\nTest.java:<span class=\"number\">3</span>: 错误: 不兼容的类型: String无法转换为<span class=\"keyword\">int</span>\n        <span class=\"keyword\">int</span> a = <span class=\"string\">\"a\"</span>;\n                ^\n<span class=\"number\">1</span> 个错误\n</code></pre>\n<p>如果只是简单的了解一下编程语言强类型、弱类型、静态类型、动态类型的区别，读到这里就可以了。下面是关于编程语言强类型、弱类型、静态类型、动态类型区别的详细和深层次的分析，涉及一下比较专业的名词和知识。</p>\n<hr>\n<p>（待续）</p>\n<p>发现一遍比较详细的文章可以读一下，<a href=\"http://linianhui.cnblogs.com/p/plp-04-datatypes.html\" title=\"数据类型\" target=\"_blank\" rel=\"noopener\">数据类型</a>  </p>\n"},{"title":"字符和字符编码","date":"2018-05-09T09:56:49.000Z","_content":"","source":"_posts/字符和字符编码.md","raw":"---\ntitle: 字符和字符编码\ndate: 2018-05-09 17:56:49\ntags:\n---\n","slug":"字符和字符编码","published":1,"updated":"2019-04-08T01:45:35.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9ueo0009zoulg433252v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"项目改造总结","date":"2018-05-02T01:51:30.000Z","_content":"\n### 项目改造总结了几点经验\n1. 项目开始尽可能想到更多方面 \n2. 尽可能不要硬编码  \n3. 层次尽可能清晰   \n4. 实体关联关系一定要明确且不要随便乱改实体关联关系\n\n#### 项目开始尽可能想到更多方面 \n根据代码大全的建议，项目开始之前想的越周到越好。在项目进行中修改项目架构和数据接口(添加表或者修改表之间的关系)都会早成项目管理混乱和代码混乱。例如：为了兼容和适应新的数据库表关系，代码中会出现很多兼容代码。这些代码看起来会很奇怪，可读性较差，增加维护难度。  \n\n#### 尽可能不要硬编码 \n这应该是基本要求了。一定要注意代码封装，写新的业务逻辑的时候，代码从高层向下一层一层抽象，例如：先抽象出controller, controller包含了整合业务的逻辑, 根据controller的要求去调用或写service, 然后service去调用或写dao。切记不能在写controller的时候碰到一个操作就转过去写service或dao, 应该先把controller写完。service同理, 先写完service再写dao。这是写新业务的方法, 在项目开始的时候，应该要先写一些可能用到的dao和service。\n\n#### 层次尽可能清晰\n代码一定要分层，层次要清晰，层与层之间的调用关系不能乱。\n\n#### 实体关联关系一定要明确且不要随便乱改实体关联关系\n更改实体关系，会产生一部分旧数据用的是以前的关联关系。更改实体关联关系相当于重构一部分功能。因为要兼容旧数据，会导致代码混乱","source":"_posts/项目改造总结.md","raw":"---\ntitle: 项目改造总结\ndate: 2018-05-02 09:51:30\ntags:\n---\n\n### 项目改造总结了几点经验\n1. 项目开始尽可能想到更多方面 \n2. 尽可能不要硬编码  \n3. 层次尽可能清晰   \n4. 实体关联关系一定要明确且不要随便乱改实体关联关系\n\n#### 项目开始尽可能想到更多方面 \n根据代码大全的建议，项目开始之前想的越周到越好。在项目进行中修改项目架构和数据接口(添加表或者修改表之间的关系)都会早成项目管理混乱和代码混乱。例如：为了兼容和适应新的数据库表关系，代码中会出现很多兼容代码。这些代码看起来会很奇怪，可读性较差，增加维护难度。  \n\n#### 尽可能不要硬编码 \n这应该是基本要求了。一定要注意代码封装，写新的业务逻辑的时候，代码从高层向下一层一层抽象，例如：先抽象出controller, controller包含了整合业务的逻辑, 根据controller的要求去调用或写service, 然后service去调用或写dao。切记不能在写controller的时候碰到一个操作就转过去写service或dao, 应该先把controller写完。service同理, 先写完service再写dao。这是写新业务的方法, 在项目开始的时候，应该要先写一些可能用到的dao和service。\n\n#### 层次尽可能清晰\n代码一定要分层，层次要清晰，层与层之间的调用关系不能乱。\n\n#### 实体关联关系一定要明确且不要随便乱改实体关联关系\n更改实体关系，会产生一部分旧数据用的是以前的关联关系。更改实体关联关系相当于重构一部分功能。因为要兼容旧数据，会导致代码混乱","slug":"项目改造总结","published":1,"updated":"2019-04-08T01:45:35.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjucd9uey000azoulve0evcwy","content":"<h3 id=\"项目改造总结了几点经验\"><a href=\"#项目改造总结了几点经验\" class=\"headerlink\" title=\"项目改造总结了几点经验\"></a>项目改造总结了几点经验</h3><ol>\n<li>项目开始尽可能想到更多方面 </li>\n<li>尽可能不要硬编码  </li>\n<li>层次尽可能清晰   </li>\n<li>实体关联关系一定要明确且不要随便乱改实体关联关系</li>\n</ol>\n<h4 id=\"项目开始尽可能想到更多方面\"><a href=\"#项目开始尽可能想到更多方面\" class=\"headerlink\" title=\"项目开始尽可能想到更多方面\"></a>项目开始尽可能想到更多方面</h4><p>根据代码大全的建议，项目开始之前想的越周到越好。在项目进行中修改项目架构和数据接口(添加表或者修改表之间的关系)都会早成项目管理混乱和代码混乱。例如：为了兼容和适应新的数据库表关系，代码中会出现很多兼容代码。这些代码看起来会很奇怪，可读性较差，增加维护难度。  </p>\n<h4 id=\"尽可能不要硬编码\"><a href=\"#尽可能不要硬编码\" class=\"headerlink\" title=\"尽可能不要硬编码\"></a>尽可能不要硬编码</h4><p>这应该是基本要求了。一定要注意代码封装，写新的业务逻辑的时候，代码从高层向下一层一层抽象，例如：先抽象出controller, controller包含了整合业务的逻辑, 根据controller的要求去调用或写service, 然后service去调用或写dao。切记不能在写controller的时候碰到一个操作就转过去写service或dao, 应该先把controller写完。service同理, 先写完service再写dao。这是写新业务的方法, 在项目开始的时候，应该要先写一些可能用到的dao和service。</p>\n<h4 id=\"层次尽可能清晰\"><a href=\"#层次尽可能清晰\" class=\"headerlink\" title=\"层次尽可能清晰\"></a>层次尽可能清晰</h4><p>代码一定要分层，层次要清晰，层与层之间的调用关系不能乱。</p>\n<h4 id=\"实体关联关系一定要明确且不要随便乱改实体关联关系\"><a href=\"#实体关联关系一定要明确且不要随便乱改实体关联关系\" class=\"headerlink\" title=\"实体关联关系一定要明确且不要随便乱改实体关联关系\"></a>实体关联关系一定要明确且不要随便乱改实体关联关系</h4><p>更改实体关系，会产生一部分旧数据用的是以前的关联关系。更改实体关联关系相当于重构一部分功能。因为要兼容旧数据，会导致代码混乱</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"项目改造总结了几点经验\"><a href=\"#项目改造总结了几点经验\" class=\"headerlink\" title=\"项目改造总结了几点经验\"></a>项目改造总结了几点经验</h3><ol>\n<li>项目开始尽可能想到更多方面 </li>\n<li>尽可能不要硬编码  </li>\n<li>层次尽可能清晰   </li>\n<li>实体关联关系一定要明确且不要随便乱改实体关联关系</li>\n</ol>\n<h4 id=\"项目开始尽可能想到更多方面\"><a href=\"#项目开始尽可能想到更多方面\" class=\"headerlink\" title=\"项目开始尽可能想到更多方面\"></a>项目开始尽可能想到更多方面</h4><p>根据代码大全的建议，项目开始之前想的越周到越好。在项目进行中修改项目架构和数据接口(添加表或者修改表之间的关系)都会早成项目管理混乱和代码混乱。例如：为了兼容和适应新的数据库表关系，代码中会出现很多兼容代码。这些代码看起来会很奇怪，可读性较差，增加维护难度。  </p>\n<h4 id=\"尽可能不要硬编码\"><a href=\"#尽可能不要硬编码\" class=\"headerlink\" title=\"尽可能不要硬编码\"></a>尽可能不要硬编码</h4><p>这应该是基本要求了。一定要注意代码封装，写新的业务逻辑的时候，代码从高层向下一层一层抽象，例如：先抽象出controller, controller包含了整合业务的逻辑, 根据controller的要求去调用或写service, 然后service去调用或写dao。切记不能在写controller的时候碰到一个操作就转过去写service或dao, 应该先把controller写完。service同理, 先写完service再写dao。这是写新业务的方法, 在项目开始的时候，应该要先写一些可能用到的dao和service。</p>\n<h4 id=\"层次尽可能清晰\"><a href=\"#层次尽可能清晰\" class=\"headerlink\" title=\"层次尽可能清晰\"></a>层次尽可能清晰</h4><p>代码一定要分层，层次要清晰，层与层之间的调用关系不能乱。</p>\n<h4 id=\"实体关联关系一定要明确且不要随便乱改实体关联关系\"><a href=\"#实体关联关系一定要明确且不要随便乱改实体关联关系\" class=\"headerlink\" title=\"实体关联关系一定要明确且不要随便乱改实体关联关系\"></a>实体关联关系一定要明确且不要随便乱改实体关联关系</h4><p>更改实体关系，会产生一部分旧数据用的是以前的关联关系。更改实体关联关系相当于重构一部分功能。因为要兼容旧数据，会导致代码混乱</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}